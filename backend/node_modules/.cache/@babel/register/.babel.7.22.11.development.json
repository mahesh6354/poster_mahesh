{"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\",\"filename\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\\\\server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"transform-react-jsx\",\"visitor\":{\"JSXNamespacedName\":{\"enter\":[null]},\"JSXSpreadChild\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"JSXFragment\":{\"exit\":[null]},\"JSXElement\":{\"exit\":[null]},\"JSXAttribute\":{\"enter\":[null]}},\"options\":{\"pragma\":\"React.createElement\",\"pragmaFrag\":\"React.Fragment\",\"runtime\":\"classic\",\"throwIfNamespace\":true,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-react-display-name\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-react-pure-annotations\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-class-static-block\",\"visitor\":{\"ClassBody\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-private-property-in-object\",\"visitor\":{\"BinaryExpression\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-class-properties\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-private-methods\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]}},\"options\":{\"loose\":\"#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error\"},\"externalDependencies\":[]},{\"key\":\"transform-numeric-separator\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"BigIntLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-logical-assignment-operators\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-nullish-coalescing-operator\",\"visitor\":{\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-chaining\",\"visitor\":{\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-json-strings\",\"visitor\":{\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-optional-catch-binding\",\"visitor\":{\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-generator-functions\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-rest-spread\",\"visitor\":{\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null,null]},\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"StaticBlock\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-regenerator\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]},\"MemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.11:development":{"value":{"code":"\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\nvar _mysql = _interopRequireDefault(require(\"mysql\"));\nvar _cors = _interopRequireDefault(require(\"cors\"));\nvar _multer = _interopRequireDefault(require(\"multer\"));\nvar _moment = _interopRequireDefault(require(\"moment\"));\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\nvar app = (0, _express[\"default\"])();\napp.get('*', function (req, res) {\n  res.send(\"server side\");\n});\nvar PORT = process.env.PORT || 8000;\napp.listen(PORT, function () {\n  console.log(\"Server is listening on port \".concat(PORT));\n});\nvar db = _mysql[\"default\"].createConnection({\n  host: 'localhost',\n  port: '3306',\n  user: \"root\",\n  password: \"admin@123\",\n  database: \"test\"\n});\ndb.connect(function (error) {\n  if (error) {\n    console.error('MySQL connection error:', error);\n    return;\n  }\n  console.log('Connected to MySQL server');\n});\napp.use(_express[\"default\"].json());\napp.use((0, _cors[\"default\"])());\napp.use(\"/uploads\", _express[\"default\"][\"static\"](\"./uploads\"));\n\n// user na mate categorylist\napp.get(\"/getactivecategory\", function (req, res) {\n  var q = \"SELECT * FROM category WHERE catecheck = 1 ORDER BY `order`\";\n  db.query(q, function (err, data) {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: \"Failed to fetch categories\"\n      });\n    }\n    var maincategoryresult = [];\n    var subcategoryresult = [];\n    for (var i = 0; i < data.length; i++) {\n      var parentid = data[i].parentid;\n      if (parentid > 0) {\n        subcategoryresult.push(data[i]);\n      } else {\n        var obj = {};\n        obj[\"id\"] = data[i].id;\n        obj[\"name\"] = data[i].title;\n        obj[\"subcategorylist\"] = [];\n        maincategoryresult.push(obj);\n      }\n    }\n    if (subcategoryresult.length > 0) {\n      for (var _i = 0; _i < maincategoryresult.length; _i++) {\n        var _parentid = maincategoryresult[_i].id;\n        var subcategorylist = [];\n        for (var j = 0; j < subcategoryresult.length; j++) {\n          if (_parentid == subcategoryresult[j].parentid) {\n            var obj = {};\n            obj[\"id\"] = subcategoryresult[j].id;\n            obj[\"name\"] = subcategoryresult[j].title;\n            subcategorylist.push(obj);\n          }\n        }\n        maincategoryresult[_i].subcategorylist = subcategorylist;\n      }\n    }\n\n    // Limit the number of main categories to 6\n    maincategoryresult = maincategoryresult.slice(0, 6);\n    return res.json(maincategoryresult);\n  });\n});\n\n//dropdown category fill\napp.get(\"/dropfill\", function (req, res) {\n  var q = \"SELECT id,title FROM category \";\n  db.query(q, function (err, data) {\n    // console.log(\"backend all data show \",data)\n    if (err) return res.json(err);\n    return res.json(data);\n  });\n});\n\n// admin insert category\napp.post(\"/admincate\", function (req, res) {\n  var _req$body = req.body,\n    title = _req$body.title,\n    catecheck = _req$body.catecheck;\n  if (!title) {\n    return res.status(422).json({\n      error: \"Please enter a title\"\n    });\n  }\n  var q = \"INSERT INTO category (`title`, `catecheck`) VALUES (?, ?)\";\n  var values = [title, catecheck];\n  // console.log(\"values is the olption\", values)\n\n  db.query(q, values, function (err, data) {\n    if (err) {\n      // console.log(err);\n      return res.status(500).json({\n        error: \"Failed to insert data into the category\"\n      });\n    }\n\n    // console.log(\"Data is inserted into the category\");\n    return res.json(\"Data is inserted into the category\");\n  });\n});\n\n//user category\napp.post(\"/getactivecate\", function (req, res) {\n  var q = \"INSERT INTO category (`title`) VALUES (?)\";\n  var values = [req.body.title];\n  // console.log(\"values\", values)\n  if (values == \"\" || !values) {\n    return res.status(422).json({\n      error: \"please not empty field is enter\"\n    });\n  } else {\n    db.query(q, [values], function (err, data) {\n      // console.log(\"data is the \",data)\n      if (err) return res.json(err);\n      // console.log(\"in category data is inserted\")\n      return res.json(\"in category data is inserted\");\n    });\n  }\n});\napp.get(\"/admin\", function (req, res) {\n  var q = \"SELECT * FROM admin\";\n  db.query(q, function (err, data) {\n    console.log(\"backend all data show \", data);\n    if (err) return res.json(err);\n    return res.json(data);\n  });\n});\n\n//admin enter the login page\napp.post(\"/admin\", function (req, res) {\n  var email = req.body.email;\n  var password = req.body.password;\n  console.log(\"email & password\", email, password);\n  var q = \"INSERT INTO admin (`email`, `password`) VALUES ?\"; // Note the change in the query\n\n  if (email === \"\" || password === \"\") {\n    res.status(500).send(\"Plz enter the data\");\n  } else {\n    var query = \"SELECT * FROM admin WHERE email = ?\";\n    db.query(query, [email], function (error, results) {\n      if (error) {\n        console.error(\"Error querying the database:\", error);\n        res.status(500).send(\"An error occurred\");\n      } else {\n        if (results.length > 0) {\n          if (results[0].password === password) {\n            return res.json(\"Login successful\");\n          } else {\n            res.status(401).send(\"Incorrect password\");\n          }\n        } else {\n          var values = [[email, password]];\n          db.query(q, [values], function (err, data) {\n            if (err) {\n              console.error(\"Error inserting data into the database:\", err);\n              return res.status(500).json(err);\n            }\n            console.log(\"Data is inserted into the admin table:\", data);\n            return res.json(\"Data is inserted into the admin table\");\n          });\n        }\n      }\n    });\n  }\n});\napp[\"delete\"](\"/admincate/:id\", function (req, res) {\n  var cateId = req.params.id;\n  // console.log(cateId)\n  var q = \"DELETE FROM category WHERE id = ?\";\n  db.query(q, [cateId], function (err, data) {\n    // console.log(\"data is the \",data)\n    if (err) return res.json(err);\n    // console.log(\"deleted\")\n    return res.json(\"deleted\");\n  });\n});\napp.put(\"/admincate/:id\", function (req, res) {\n  var cateId = req.params.id;\n  var _req$body2 = req.body,\n    title = _req$body2.title,\n    catecheck = _req$body2.catecheck;\n\n  // console.log(\"id is the\" , cateId)\n\n  // console.log(\"values is the \",title, catecheck)\n  var q = \"UPDATE category SET `title` = ?, `catecheck` = ? WHERE id = ?\";\n  var values = [title, catecheck, cateId];\n  db.query(q, values, function (err, data) {\n    if (err) {\n      // console.log(err);\n      return res.status(500).json({\n        error: \"Failed to update the category\"\n      });\n    }\n\n    // console.log(\"Data is updated in the category\");\n    return res.json(\"Data is updated in the category\");\n  });\n});\n\n/////////////////////////////////////////////////////////////\n\nvar imgconfig = _multer[\"default\"].diskStorage({\n  destination: function destination(req, file, callback) {\n    callback(null, \"./uploads\");\n  },\n  filename: function filename(req, file, callback) {\n    callback(null, \"\".concat(file.originalname));\n  }\n});\n\n//img filter\nvar isImg = function isImg(req, file, callback) {\n  if (file.mimetype.startsWith(\"image\")) {\n    callback(null, true);\n  } else {\n    callback(null, Error(\"only image is allowed\"));\n  }\n};\nvar upload = (0, _multer[\"default\"])({\n  storage: imgconfig,\n  fileFilter: isImg\n});\n// console.log(\"upload is images \",upload)\n\n//posted insert data for the admin\napp.post(\"/posted\", upload.single(\"photo\"), function (req, res) {\n  var _req$body3 = req.body,\n    title = _req$body3.title,\n    author = _req$body3.author,\n    shortdesc = _req$body3.shortdesc,\n    desc = _req$body3.desc,\n    category = _req$body3.category,\n    sat = _req$body3.sat,\n    checkbox = _req$body3.checkbox,\n    metaTitle = _req$body3.metaTitle,\n    metaDescription = _req$body3.metaDescription;\n  var filename = req.file ? req.file.filename : null;\n\n  // console.log(\"check box values is the \",checkbox)\n\n  if (!title || !desc || !filename || !sat) {\n    res.status(422).json({\n      status: 422,\n      message: \"fill all details\"\n    });\n    return;\n  }\n  try {\n    var date = (0, _moment[\"default\"])(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\n    db.query(\"SELECT id FROM category WHERE title = ?\", [category], function (err, result) {\n      if (err) {\n        // console.log(\"error\", err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal server error\"\n        });\n        return;\n      }\n      if (result.length === 0) {\n        res.status(404).json({\n          status: 404,\n          message: \"Category not found\"\n        });\n        return;\n      }\n      var categoryId = result[0].id;\n      var post = {\n        title: title,\n        categoryid: categoryId,\n        author: author,\n        image: filename,\n        shortdesc: shortdesc,\n        desc: desc,\n        category: category,\n        sat: sat,\n        date: date,\n        checkbox: checkbox,\n        metaTitle: metaTitle,\n        metaDescription: metaDescription\n      };\n      db.query(\"INSERT INTO post SET ?\", post, function (err, result) {\n        if (err) {\n          // console.log(\"error\", err);\n          res.status(500).json({\n            status: 500,\n            message: \"Internal server error\"\n          });\n        } else {\n          // console.log(\"data added\", result);\n          res.status(200).json({\n            message: \"post upload successful\",\n            result: result\n          });\n        }\n      });\n    });\n  } catch (err) {\n    res.status(422).json({\n      status: 422,\n      err: err\n    });\n  }\n});\n\n//all post view \napp.get(\"/update/:id\", function (req, res) {\n  var sql = \"SELECT * FROM post WHERE id = ?\";\n  var id = req.params.id;\n  db.query(sql, [id], function (err, result) {\n    if (err) return res.json({\n      Error: err\n    });\n    return res.json(result);\n  });\n});\n\n//update all post for the admin\n\napp.put(\"/update/:id\", upload.single(\"photo\"), function (req, res) {\n  var cateId = req.params.id;\n  // console.log(\"cateID\",cateId);\n\n  var _req$body4 = req.body,\n    id = _req$body4.id,\n    title = _req$body4.title,\n    author = _req$body4.author,\n    shortdesc = _req$body4.shortdesc,\n    desc = _req$body4.desc,\n    category = _req$body4.category,\n    sat = _req$body4.sat,\n    checkbox = _req$body4.checkbox,\n    metatitle = _req$body4.metatitle,\n    metaDescription = _req$body4.metaDescription;\n  var filename = req.file ? req.file.filename : null;\n  db.query(\"SELECT id FROM category WHERE title = ?\", [category], function (err, result) {\n    if (err) {\n      // console.log(\"error\", err);\n      res.status(500).json({\n        status: 500,\n        message: \"Internal server error\"\n      });\n      return;\n    }\n    if (result.length === 0) {\n      res.status(404).json({\n        status: 404,\n        message: \"Category not found\"\n      });\n      return;\n    }\n    try {\n      var date = (0, _moment[\"default\"])(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\n      var categoryid = result[0].id;\n\n      // console.log(\"categoryid is the\",categoryid)\n\n      var post = {\n        title: title,\n        category_id: categoryid,\n        author: author,\n        image: filename,\n        shortdesc: shortdesc,\n        desc: desc,\n        category: category,\n        sat: sat,\n        date: date,\n        checkbox: checkbox,\n        metatitle: metatitle,\n        metaDescription: metaDescription\n      };\n\n      // Update query based on whether a new file is uploaded\n      var query;\n      var params;\n      if (filename) {\n        query = \"UPDATE post SET `title`=?, `author`=?, `image`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?, `metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\n        params = [title, author, filename, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\n      } else {\n        query = \"UPDATE post SET `title`=?, `author`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?,`metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\n        params = [title, author, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\n      }\n      db.query(query, params, function (err, result) {\n        if (err) {\n          // console.log(\"error\", err);\n          res.status(500).json({\n            status: 500,\n            message: \"Internal Server Error\"\n          });\n        } else {\n          // console.log(\"data updated\", result);\n          res.status(200).json({\n            message: \"post update successful\",\n            result: result\n          });\n        }\n      });\n    } catch (err) {\n      res.status(422).json({\n        status: 422,\n        err: err\n      });\n    }\n  });\n});\n\n//posted view all for admin\napp.get(\"/posted\", function (req, res) {\n  try {\n    db.query('SELECT id, title, author, image, shortdesc,`desc`, category, sat, checkbox FROM post', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\napp.get(\"/postedUser\", function (req, res) {\n  try {\n    var titleCharacterLimit = 35; // Adjust the title character limit as needed\n    var shortdescCharacterLimit = 170; // Adjust the shortdesc character limit as needed\n\n    db.query('SELECT id, LEFT(title, ?) as title, author, image, CONCAT(LEFT(shortdesc, ?),\".\") as shortdesc, `desc`, category, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 1', [titleCharacterLimit, shortdescCharacterLimit], function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\napp.get(\"/relatedpost\", function (req, res) {\n  try {\n    db.query('SELECT id, CONCAT(SUBSTRING(title, 1, 44), \".\") AS title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\napp.get(\"/title\", function (req, res) {\n  try {\n    var titleCharacterLimit = 40; // Adjust the character limit as needed\n\n    db.query('SELECT id, CONCAT(LEFT(title, ?), \".\") as title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4', [titleCharacterLimit], function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\napp.get(\"/deals\", function (req, res) {\n  try {\n    db.query('SELECT id, title, image, author, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\n\n//card img title\napp.get(\"/card\", function (req, res) {\n  try {\n    db.query('SELECT id, title, image, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4 ', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\napp.get(\"/mi\", function (req, res) {\n  try {\n    db.query('SELECT id, title, category, image, author, date, CONCAT(SUBSTRING(shortdesc, 1, 255), \".\") as shortdesc, `desc`, checkbox FROM post WHERE category = \"MI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\n\n//home lenovo category\napp.get(\"/lenovo\", function (req, res) {\n  try {\n    db.query('SELECT id, title, category, image, author, date, shortdesc, `desc`, checkbox FROM post WHERE category = \"LENOVO\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\n\n//xiaomi data\napp.get(\"/xiaomi\", function (req, res) {\n  try {\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"XIAOMI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 3', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\n\n//sasung\napp.get(\"/samsung\", function (req, res) {\n  try {\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"SAMSUNG\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', function (err, results) {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err: err\n    });\n  }\n});\n\n//delete posted \napp[\"delete\"](\"/posted/:id\", function (req, res) {\n  var postId = req.params.id;\n  // console.log(postId)\n  var q = \"DELETE FROM post WHERE id = ?\";\n  db.query(q, [postId], function (err, data) {\n    // console.log(\"data is the \",data)\n    if (err) return res.json(err);\n    // console.log(\"data deleted\")\n    return res.json(\"data deleted\");\n  });\n});\n\n//single full post\n\napp.get(\"/selectpost/:id\", function (req, res) {\n  var postId = req.params.id;\n  // console.log(\"post id is the\", postId);\n\n  var query = \"\\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image,\\n    p.metatitle, p.metaDescription, p.checkbox\\n    FROM post p\\n    INNER JOIN category c ON p.category_id = c.id\\n    WHERE p.id = \".concat(postId, \" AND p.checkbox = \\\"true\\\" \");\n  db.query(query, function (error, results) {\n    if (error) {\n      console.error('Error fetching post:', error);\n      res.status(500).json({\n        error: 'Error fetching post'\n      });\n    } else {\n      if (results.length === 0) {\n        // No result found for the provided post ID\n        res.status(404).json({\n          error: 'Post not found'\n        });\n      } else {\n        var post = results[0];\n        res.json(post);\n      }\n    }\n  });\n});\n\n//latest 3 blog post related\napp.get(\"/latestblog/:id\", function (req, res) {\n  var postid = req.params.id;\n  // console.log(\"post id is the id\", postid);\n\n  var query = \"\\n  SELECT p.id, p.category_id, p.title, p.author, p.date, \\n  p.category, p.desc, p.shortdesc, p.image, p.metatitle, p.metaDescription, p.checkbox\\n  FROM post p\\n  INNER JOIN category c ON p.category_id = c.id\\n  WHERE p.category_id = (\\n    SELECT category_id\\n    FROM post\\n    WHERE id = \".concat(postid, \"\\n  )\\n  AND p.id != \").concat(postid, \"\\n  AND p.checkbox = \\\"true\\\"\\n  LIMIT 3 OFFSET 0\");\n  db.query(query, function (error, results) {\n    if (error) {\n      console.error('Error fetching posts:', error);\n      res.status(500).json({\n        error: 'Error fetching posts'\n      });\n    } else {\n      if (results.length === 0) {\n        // No results found for the provided post ID\n        res.status(404).json({\n          error: 'Data not found'\n        });\n      } else {\n        var posts = results;\n        res.json(posts);\n      }\n    }\n  });\n});\n\n// all post fetch\napp.get(\"/post\", function (req, res) {\n  var _req$query = req.query,\n    page = _req$query.page,\n    pageSize = _req$query.pageSize;\n  var pageNumber = parseInt(page) || 1;\n  var pageSizeNumber = parseInt(pageSize) || 2;\n  var offset = (pageNumber - 1) * pageSizeNumber;\n  try {\n    var query = \"SELECT  shortdesc, id, title, image, author, date FROM post WHERE sat = \\\"publish\\\"\\n     AND checkbox = \\\"true\\\"\\n     LIMIT \".concat(pageSizeNumber, \" OFFSET \").concat(offset);\n    var countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\n    db.query(query, function (error, results) {\n      if (error) {\n        console.error('Error executing fetch all posts query:', error);\n        res.status(500).json({\n          error: 'Error executing query'\n        });\n      } else {\n        // Fetch the total count of posts\n        db.query(countPostsQuery, function (error, countResult) {\n          if (error) {\n            console.error('Error executing count posts query:', error);\n            res.status(500).json({\n              error: 'Error executing query'\n            });\n          } else {\n            var totalCount = countResult[0].total;\n            var totalPages = Math.ceil(totalCount / pageSizeNumber);\n            res.json({\n              results: results,\n              totalPages: totalPages\n            });\n          }\n        });\n      }\n    });\n  } catch (err) {\n    console.error('Error executing fetch all posts:', err);\n    res.status(503).json({\n      error: 'Error executing query'\n    });\n  }\n});\n\n//allpostcard\napp.get(\"/allpostcard\", function (req, res) {\n  var _req$query2 = req.query,\n    page = _req$query2.page,\n    pageSize = _req$query2.pageSize;\n  var pageNumber = parseInt(page) || 1;\n  var pageSizeNumber = parseInt(pageSize) || 2;\n  var offset = (pageNumber - 1) * pageSizeNumber;\n  try {\n    var query = \"SELECT id, title, CONCAT(SUBSTRING(shortdesc, 1, 100),\\\".\\\") as shortdesc, image, author, date FROM post WHERE sat = \\\"publish\\\" AND checkbox = \\\"true\\\" LIMIT \".concat(pageSizeNumber, \" OFFSET \").concat(offset);\n    var countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\n    db.query(query, function (error, results) {\n      if (error) {\n        console.error('Error executing fetch all posts query:', error);\n        res.status(500).json({\n          error: 'Error executing query'\n        });\n      } else {\n        // Fetch the total count of posts\n        db.query(countPostsQuery, function (error, countResult) {\n          if (error) {\n            console.error('Error executing count posts query:', error);\n            res.status(500).json({\n              error: 'Error executing query'\n            });\n          } else {\n            var totalCount = countResult[0].total;\n            var totalPages = Math.ceil(totalCount / pageSizeNumber);\n            res.json({\n              results: results,\n              totalPages: totalPages\n            });\n          }\n        });\n      }\n    });\n  } catch (err) {\n    console.error('Error executing fetch all posts:', err);\n    res.status(503).json({\n      error: 'Error executing query'\n    });\n  }\n});\n\n//specific blog post fetch \napp.get(\"/categoryPage/:id\", function (req, res) {\n  var categoryId = req.params.id;\n  // console.log(\"category id is the\", categoryId);\n  var _req$query3 = req.query,\n    page = _req$query3.page,\n    pageSize = _req$query3.pageSize;\n  var pageNumber = parseInt(page) || 1;\n  var pageSizeNumber = parseInt(pageSize) || 2; // Updated pageSizeNumber to 3\n  var offset = (pageNumber - 1) * pageSizeNumber;\n  var query = \"\\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, shortdesc, p.image, p.checkbox\\n    FROM post p\\n    INNER JOIN category c ON p.category_id = c.id\\n    WHERE c.id = \".concat(categoryId, \" AND p.checkbox = \\\"true\\\" AND p.sat = \\\"publish\\\"\\n    LIMIT \").concat(pageSizeNumber, \" OFFSET \").concat(offset);\n  var countPostsQuery = \"SELECT COUNT(*) AS total FROM post WHERE category_id = \".concat(categoryId, \" AND checkbox = \\\"true\\\" AND sat = \\\"publish\\\"\");\n  db.query(query, function (error, results) {\n    if (error) {\n      console.error('Error executing fetch all posts query:', error);\n      res.status(500).json({\n        error: 'Error executing query'\n      });\n    } else {\n      // Fetch the total count of posts for the specific category\n      db.query(countPostsQuery, function (error, countResult) {\n        if (error) {\n          console.error('Error executing count posts query:', error);\n          res.status(500).json({\n            error: 'Error executing query'\n          });\n        } else {\n          var totalCount = countResult[0].total;\n          var totalPages = Math.ceil(totalCount / pageSizeNumber);\n          res.json({\n            results: results,\n            totalPages: totalPages\n          });\n        }\n      });\n    }\n  });\n});\n\n//fetch id using to category related subcategory data \napp.get(\"/categoryRelatedSubcategoryPost/:id\", function (req, res) {\n  var categoryId = req.params.id;\n  // console.log(\"category id is\", categoryId);\n\n  var query = \"\\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, \\n          shortdesc, p.image, p.checkbox\\n    FROM post p\\n    INNER JOIN category c ON p.category_id = c.id \\n    WHERE c.parentid = ? AND p.checkbox = \\\"true\\\" LIMIT 3\";\n  db.query(query, [categoryId], function (error, results) {\n    if (error) {\n      console.error('Error fetching posts:', error);\n      res.status(500).json({\n        error: 'Error fetching posts'\n      });\n    } else {\n      if (results.length === 0) {\n        // No results found for the provided categoryId\n        res.status(401).json({\n          error: 'Data not found'\n        });\n      } else {\n        res.json(results);\n      }\n    }\n  });\n});\n\n//specific blog post fetch to subcategory\napp.get(\"/subcategoryPage/:id\", function (req, res) {\n  var Cateid = req.params.id;\n  // console.log(\"category id is\", Cateid);\n\n  var query = \"\\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image, p.checkbox\\n    FROM post p\\n    INNER JOIN category c ON p.category_id = c.id\\n    WHERE c.id = \".concat(Cateid, \" AND p.checkbox = \\\"true\\\" LIMIT 2\");\n  db.query(query, function (error, results) {\n    if (error) {\n      console.error('Error fetching posts:', error);\n      res.status(500).json({\n        error: 'Error fetching posts'\n      });\n    } else {\n      if (results.length === 0) {\n        // No results found for the provided categoryId\n        res.status(401).json({\n          error: 'Data not found'\n        });\n      } else {\n        res.json(results);\n      }\n    }\n  });\n});\n\n//search user anything\napp.get(\"/searchpage\", function (req, res) {\n  var searchTerm = req.query.q;\n  var _req$query4 = req.query,\n    page = _req$query4.page,\n    pageSize = _req$query4.pageSize;\n  var pageNumber = parseInt(page) || 1;\n  var pageSizeNumber = parseInt(pageSize) || 2;\n  var offset = (pageNumber - 1) * pageSizeNumber;\n\n  // console.log(\"searchTerm is the name \", searchTerm);\n  var query = \"\\n    SELECT p.id, p.category_id, p.title, p.author, p.date,\\n      p.category, p.desc, p.shortdesc, SUBSTRING(p.shortdesc, 1, 80) AS shortdesc, p.image, p.checkbox\\n    FROM post p\\n    INNER JOIN category c ON p.category_id = c.id\\n    WHERE (p.title LIKE '%\".concat(searchTerm, \"%'\\n        OR p.category LIKE '%\").concat(searchTerm, \"%'\\n        OR p.desc LIKE '%\").concat(searchTerm, \"%'\\n        OR p.shortdesc LIKE '%\").concat(searchTerm, \"%')\\n        AND p.checkbox = 'true'\\n    LIMIT \").concat(pageSizeNumber, \" OFFSET \").concat(offset);\n  var countPostsQuery = \"\\n    SELECT COUNT(*) AS total\\n    FROM post\\n    WHERE (title LIKE '%\".concat(searchTerm, \"%'\\n        OR category LIKE '%\").concat(searchTerm, \"%'\\n        OR `desc` LIKE '%\").concat(searchTerm, \"%'\\n        OR shortdesc LIKE '%\").concat(searchTerm, \"%')\\n        AND checkbox = 'true'\");\n  db.query(query, function (error, results) {\n    if (error) {\n      console.error('Error executing fetch all posts query:', error);\n      res.status(500).json({\n        error: 'Error executing query'\n      });\n    } else {\n      // Fetch the total count of posts\n      db.query(countPostsQuery, function (error, countResult) {\n        if (error) {\n          console.error('Error executing count posts query:', error);\n          res.status(500).json({\n            error: 'Error executing query'\n          });\n        } else {\n          var totalCount = countResult[0].total;\n          var totalPages = Math.ceil(totalCount / pageSizeNumber);\n          res.json({\n            results: results,\n            totalPages: totalPages\n          });\n        }\n      });\n    }\n  });\n});\n\n// admin get category \napp.get(\"/admincate\", function (req, res) {\n  var _req$query5 = req.query,\n    page = _req$query5.page,\n    pageSize = _req$query5.pageSize;\n  var pageNumber = parseInt(page) || 1;\n\n  // console.log(\"number\",pageNumber)\n  var pageSizeNumber = parseInt(pageSize) || 2;\n  // console.log(\"pasizenumber\",pageSizeNumber)\n  var offset = (pageNumber - 1) * pageSizeNumber;\n  // console.log(offset)\n  try {\n    var query = \"SELECT * FROM category LIMIT \".concat(pageSizeNumber, \" OFFSET \").concat(offset);\n    var countPostsQuery = 'SELECT COUNT(*) AS total FROM category';\n    db.query(query, function (error, results) {\n      if (error) {\n        console.error('Error executing fetch all posts query:', error);\n        res.status(500).json({\n          error: 'Error executing query'\n        });\n      } else {\n        // Fetch the total count of posts\n        db.query(countPostsQuery, function (error, countResult) {\n          if (error) {\n            console.error('Error executing count posts query:', error);\n            res.status(500).json({\n              error: 'Error executing query'\n            });\n          } else {\n            var totalCount = countResult[0].total;\n            var totalPages = Math.ceil(totalCount / pageSizeNumber);\n            res.json({\n              results: results,\n              totalPages: totalPages\n            });\n          }\n        });\n      }\n    });\n  } catch (err) {\n    console.error('Error executing fetch all posts:', err);\n    res.status(503).json({\n      error: 'Error executing query'\n    });\n  }\n});\n\n//pagination of the post\napp.get('/posts', function (req, res) {\n  var _req$query6 = req.query,\n    page = _req$query6.page,\n    pageSize = _req$query6.pageSize;\n  var pageNumber = parseInt(page) || 1;\n  var pageSizeNumber = parseInt(pageSize) || 2; // Update pageSizeNumber to 4\n  var offset = (pageNumber - 1) * pageSizeNumber;\n\n  // Fetch all posts from the database with pagination\n  var fetchAllPostsQuery = \"SELECT * FROM post LIMIT \".concat(pageSizeNumber, \" OFFSET \").concat(offset);\n  var countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\n  db.query(fetchAllPostsQuery, function (error, results) {\n    if (error) {\n      console.error('Error executing fetch all posts query:', error);\n      res.status(500).json({\n        error: 'Error executing query'\n      });\n    } else {\n      // Fetch the total count of posts\n      db.query(countPostsQuery, function (error, countResult) {\n        if (error) {\n          console.error('Error executing count posts query:', error);\n          res.status(500).json({\n            error: 'Error executing query'\n          });\n        } else {\n          var totalCount = countResult[0].total;\n          var totalPages = Math.ceil(totalCount / pageSizeNumber);\n          res.json({\n            results: results,\n            totalPages: totalPages\n          });\n        }\n      });\n    }\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["_express","_interopRequireDefault","require","_mysql","_cors","_multer","_moment","obj","__esModule","app","express","get","req","res","send","PORT","process","env","listen","console","log","concat","db","mysql","createConnection","host","port","user","password","database","connect","error","use","json","cors","q","query","err","data","status","maincategoryresult","subcategoryresult","i","length","parentid","push","id","title","subcategorylist","j","slice","post","_req$body","body","catecheck","values","email","results","cateId","params","put","_req$body2","imgconfig","multer","diskStorage","destination","file","callback","filename","originalname","isImg","mimetype","startsWith","Error","upload","storage","fileFilter","single","_req$body3","author","shortdesc","desc","category","sat","checkbox","metaTitle","metaDescription","message","date","moment","Date","format","result","categoryId","categoryid","image","sql","_req$body4","metatitle","category_id","titleCharacterLimit","shortdescCharacterLimit","postId","postid","posts","_req$query","page","pageSize","pageNumber","parseInt","pageSizeNumber","offset","countPostsQuery","countResult","totalCount","total","totalPages","Math","ceil","_req$query2","_req$query3","Cateid","searchTerm","_req$query4","_req$query5","_req$query6","fetchAllPostsQuery"],"sourceRoot":"C:\\shaared\\reactjs\\poster\\backend\\","sources":["server.js"],"sourcesContent":["import express from \"express\";\r\nimport mysql from \"mysql\";\r\nimport cors from \"cors\";\r\nimport multer from \"multer\";\r\nimport moment from \"moment\";\r\n\r\n\r\nconst app = express(); \r\n\r\n\r\n\r\napp.get('*', (req, res) => {\r\n   res.send(\"server side\")\r\n})\r\n\r\n\r\nconst PORT = process.env.PORT || 8000;\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is listening on port ${PORT}`);\r\n});\r\n\r\n\r\nconst db = mysql.createConnection ({\r\n    host: 'localhost', \r\n    port: '3306',\r\n    user: \"root\",\r\n    password : \"admin@123\",\r\n    database : \"test\"\r\n})\r\n\r\ndb.connect((error) => {\r\n  if (error) {\r\n    console.error('MySQL connection error:', error);\r\n    return;\r\n  }\r\n  console.log('Connected to MySQL server');\r\n});\r\n\r\n\r\napp.use(express.json());\r\napp.use(cors());\r\napp.use(\"/uploads\",express.static(\"./uploads\"));\r\n\r\n\r\n\r\n// user na mate categorylist\r\napp.get(\"/getactivecategory\", (req, res) => {\r\n  const q = \"SELECT * FROM category WHERE catecheck = 1 ORDER BY `order`\";\r\n  db.query(q, (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ error: \"Failed to fetch categories\" });\r\n    }\r\n\r\n    let maincategoryresult = [];\r\n    let subcategoryresult = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      let parentid = data[i].parentid;\r\n      if (parentid > 0) {\r\n        subcategoryresult.push(data[i]);\r\n      } else {\r\n        var obj = {};\r\n        obj[\"id\"] = data[i].id;\r\n        obj[\"name\"] = data[i].title;\r\n        obj[\"subcategorylist\"] = [];\r\n        maincategoryresult.push(obj);\r\n      }\r\n    }\r\n\r\n    if (subcategoryresult.length > 0) {\r\n      for (let i = 0; i < maincategoryresult.length; i++) {\r\n        let parentid = maincategoryresult[i].id;\r\n        let subcategorylist = [];\r\n        for (let j = 0; j < subcategoryresult.length; j++) {\r\n          if (parentid == subcategoryresult[j].parentid) {\r\n            var obj = {};\r\n            obj[\"id\"] = subcategoryresult[j].id;\r\n            obj[\"name\"] = subcategoryresult[j].title;\r\n            subcategorylist.push(obj);\r\n          }\r\n        }\r\n        maincategoryresult[i].subcategorylist = subcategorylist;\r\n      }\r\n    }\r\n\r\n    // Limit the number of main categories to 6\r\n    maincategoryresult = maincategoryresult.slice(0, 6);\r\n\r\n    return res.json(maincategoryresult);\r\n  });\r\n});\r\n\r\n\r\n//dropdown category fill\r\napp.get(\"/dropfill\", (req, res) => {\r\n  const q = \"SELECT id,title FROM category \"\r\n  db.query(q,(err,data) => {\r\n    // console.log(\"backend all data show \",data)\r\n    if(err) return res.json(err)\r\n    return res.json(data)\r\n    \r\n  })\r\n})\r\n\r\n\r\n// admin insert category\r\napp.post(\"/admincate\", (req, res) => {\r\n  const { title, catecheck } = req.body;\r\n\r\n  if (!title) {\r\n    return res.status(422).json({ error: \"Please enter a title\" });\r\n  }\r\n\r\n  const q = \"INSERT INTO category (`title`, `catecheck`) VALUES (?, ?)\";\r\n  const values = [title, catecheck];\r\n  // console.log(\"values is the olption\", values)\r\n\r\n  db.query(q, values, (err, data) => {\r\n    if (err) {\r\n      // console.log(err);\r\n      return res.status(500).json({ error: \"Failed to insert data into the category\" });\r\n    }\r\n\r\n    // console.log(\"Data is inserted into the category\");\r\n    return res.json(\"Data is inserted into the category\");\r\n  });\r\n});\r\n\r\n\r\n\r\n//user category\r\napp.post(\"/getactivecate\", (req, res) => {\r\n  const q = \"INSERT INTO category (`title`) VALUES (?)\"\r\n  const values = [req.body.title]\r\n  // console.log(\"values\", values)\r\nif (values == \"\" || !values) {\r\nreturn res.status(422).json({error: \"please not empty field is enter\"}) \r\n}else{\r\n  db.query(q,[values], (err,data) => {\r\n      // console.log(\"data is the \",data)\r\n      if(err) return res.json(err)\r\n      // console.log(\"in category data is inserted\")\r\n      return res.json(\"in category data is inserted\")\r\n   })\r\n  }\r\n})\r\n\r\n\r\n\r\n\r\napp.get(\"/admin\", (req, res) =>{\r\n  const q = \"SELECT * FROM admin\"\r\n  db.query(q,(err,data) => {\r\n    console.log(\"backend all data show \",data)\r\n    if(err) return res.json(err)\r\n    return res.json(data)\r\n  })\r\n})\r\n\r\n\r\n//admin enter the login page\r\napp.post(\"/admin\", (req, res) => {\r\n  let email = req.body.email;\r\n  let password = req.body.password;\r\n\r\n  console.log(\"email & password\", email, password);\r\n\r\n  const q = \"INSERT INTO admin (`email`, `password`) VALUES ?\"; // Note the change in the query\r\n\r\n\r\n  if (email === \"\" || password === \"\") {\r\n    res.status(500).send(\"Plz enter the data\");\r\n  } else {\r\n    const query = `SELECT * FROM admin WHERE email = ?`;\r\n    db.query(query, [email], (error, results) => {\r\n      if (error) {\r\n        console.error(\"Error querying the database:\", error);\r\n        res.status(500).send(\"An error occurred\");\r\n      } else {\r\n        if (results.length > 0) {\r\n          \r\n          if (results[0].password === password) {\r\n            return res.json(\"Login successful\"); \r\n          } else {\r\n            res.status(401).send(\"Incorrect password\"); \r\n          }\r\n        } else {\r\n          const values = [[email, password]]; \r\n          db.query(q, [values], (err, data) => {\r\n            if (err) {\r\n              console.error(\"Error inserting data into the database:\", err);\r\n              return res.status(500).json(err);\r\n            }\r\n            console.log(\"Data is inserted into the admin table:\", data);\r\n            return res.json(\"Data is inserted into the admin table\");\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\napp.delete(\"/admincate/:id\", (req, res) => {\r\n  const cateId = req.params.id;\r\n  // console.log(cateId)\r\n  const q = \"DELETE FROM category WHERE id = ?\"\r\n\r\n  db.query(q,[cateId], (err,data) => {\r\n    // console.log(\"data is the \",data)\r\n    if(err) return res.json(err)\r\n    // console.log(\"deleted\")\r\n    return res.json(\"deleted\")\r\n })\r\n})\r\napp.put(\"/admincate/:id\", (req, res) => {\r\n  const cateId = req.params.id;\r\n  const { title, catecheck } = req.body;\r\n\r\n  // console.log(\"id is the\" , cateId)\r\n\r\n  // console.log(\"values is the \",title, catecheck)\r\n  const q = \"UPDATE category SET `title` = ?, `catecheck` = ? WHERE id = ?\";\r\n  const values = [title, catecheck, cateId];\r\n\r\n  db.query(q, values, (err, data) => {\r\n    if (err) {\r\n      // console.log(err);\r\n      return res.status(500).json({ error: \"Failed to update the category\" });\r\n    }\r\n\r\n    // console.log(\"Data is updated in the category\");\r\n    return res.json(\"Data is updated in the category\");\r\n  });\r\n});\r\n\r\n/////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n  var imgconfig = multer.diskStorage({\r\n    destination:(req,file,callback)=>{\r\n      callback(null,\"./uploads\");\r\n    },\r\n    filename:(req,file,callback)=>{\r\n      callback(null,`${file.originalname}`);\r\n    }\r\n  })\r\n\r\n//img filter\r\nconst isImg = (req,file,callback) =>{\r\n    if(file.mimetype.startsWith(\"image\")){\r\n      callback(null,true)\r\n    }else{\r\n      callback(null,Error(\"only image is allowed\"))\r\n    }\r\n}\r\n\r\nvar upload = multer({\r\n  storage:imgconfig,\r\n  fileFilter:isImg\r\n})\r\n// console.log(\"upload is images \",upload)\r\n\r\n\r\n//posted insert data for the admin\r\napp.post(\"/posted\", upload.single(\"photo\"), (req, res) => {\r\n  const { title, author, shortdesc, desc, category, sat, checkbox, metaTitle, metaDescription } = req.body;\r\n  const filename = req.file ? req.file.filename : null;\r\n\r\n  // console.log(\"check box values is the \",checkbox)\r\n\r\n  if (!title || !desc || !filename || !sat) {\r\n    res.status(422).json({ status: 422, message: \"fill all details\" });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    let date = moment(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\r\n\r\n    db.query(\"SELECT id FROM category WHERE title = ?\", [category], (err, result) => {\r\n      if (err) {\r\n        // console.log(\"error\", err);\r\n        res.status(500).json({ status: 500, message: \"Internal server error\" });\r\n        return;\r\n      }\r\n\r\n      if (result.length === 0) {\r\n        res.status(404).json({ status: 404, message: \"Category not found\" });\r\n        return;\r\n      }\r\n\r\n      const categoryId = result[0].id;\r\n\r\n      const post = {\r\n        \r\n        title,\r\n        categoryid: categoryId,\r\n        author,\r\n        image: filename,\r\n        shortdesc,\r\n        desc,\r\n        category,\r\n        sat,\r\n        date,\r\n        checkbox,\r\n        metaTitle,\r\n        metaDescription\r\n      };\r\n\r\n      db.query(\"INSERT INTO post SET ?\", post, (err, result) => {\r\n        if (err) {\r\n          // console.log(\"error\", err);\r\n          res.status(500).json({ status: 500, message: \"Internal server error\" });\r\n        } else {\r\n          // console.log(\"data added\", result);\r\n          res.status(200).json({ message: \"post upload successful\", result });\r\n        }\r\n      });\r\n    });\r\n  } catch (err) {\r\n    res.status(422).json({ status: 422, err });\r\n  }\r\n});\r\n\r\n//all post view \r\napp.get(\"/update/:id\", (req, res) => {\r\n  const sql = \"SELECT * FROM post WHERE id = ?\";\r\n  const id =req.params.id;\r\n  db.query(sql,[id], (err,result) => {\r\n    if(err) return res.json({Error : err});\r\n    return res.json(result)\r\n  })\r\n})\r\n\r\n\r\n\r\n//update all post for the admin\r\n\r\napp.put(\"/update/:id\", upload.single(\"photo\"), (req, res) => {\r\n  const cateId = req.params.id;\r\n  // console.log(\"cateID\",cateId);\r\n\r\n  const { id, title, author, shortdesc, desc, category, sat, checkbox, metatitle, metaDescription } = req.body;\r\n  const filename = req.file ? req.file.filename : null;\r\n\r\n  db.query(\"SELECT id FROM category WHERE title = ?\", [category], (err, result) => {\r\n    if (err) {\r\n      // console.log(\"error\", err);\r\n      res.status(500).json({ status: 500, message: \"Internal server error\" });\r\n      return;\r\n    }\r\n\r\n    if (result.length === 0) {\r\n      res.status(404).json({ status: 404, message: \"Category not found\" });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let date = moment(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\r\n\r\n      const categoryid = result[0].id;\r\n\r\n      // console.log(\"categoryid is the\",categoryid)\r\n\r\n      const post = {\r\n        title,\r\n        category_id: categoryid,\r\n        author,\r\n        image: filename,\r\n        shortdesc,\r\n        desc,\r\n        category,\r\n        sat,\r\n        date,\r\n        checkbox,\r\n        metatitle,\r\n        metaDescription\r\n      };\r\n\r\n      // Update query based on whether a new file is uploaded\r\n      let query;\r\n      let params;\r\n      if (filename) {\r\n        query = \"UPDATE post SET `title`=?, `author`=?, `image`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?, `metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\r\n        params = [title, author, filename, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\r\n      } else {\r\n        query = \"UPDATE post SET `title`=?, `author`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?,`metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\r\n        params = [title, author, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\r\n      }\r\n\r\n      db.query(query, params, (err, result) => {\r\n        if (err) {\r\n          // console.log(\"error\", err);\r\n          res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n        } else {\r\n          // console.log(\"data updated\", result);\r\n          res.status(200).json({ message: \"post update successful\", result });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      res.status(422).json({ status: 422, err });\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//posted view all for admin\r\napp.get(\"/posted\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, author, image, shortdesc,`desc`, category, sat, checkbox FROM post', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\napp.get(\"/postedUser\", (req, res) => {\r\n  try {\r\n    const titleCharacterLimit = 35; // Adjust the title character limit as needed\r\n    const shortdescCharacterLimit = 170; // Adjust the shortdesc character limit as needed\r\n    \r\n    db.query('SELECT id, LEFT(title, ?) as title, author, image, CONCAT(LEFT(shortdesc, ?),\".\") as shortdesc, `desc`, category, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 1', [titleCharacterLimit, shortdescCharacterLimit], (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\napp.get(\"/relatedpost\", (req, res) => {\r\n  try {    \r\n    db.query('SELECT id, CONCAT(SUBSTRING(title, 1, 44), \".\") AS title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\napp.get(\"/title\", (req, res) => {\r\n  try {\r\n    const titleCharacterLimit = 40; // Adjust the character limit as needed\r\n    \r\n    db.query('SELECT id, CONCAT(LEFT(title, ?), \".\") as title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4', [titleCharacterLimit], (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\napp.get(\"/deals\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, image, author, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n//card img title\r\n  app.get(\"/card\", (req, res) => {\r\n    try {\r\n      db.query('SELECT id, title, image, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4 ', (err, results) => {\r\n        if (err) {\r\n          // console.log(err);\r\n          res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n        } else {\r\n          // console.log(\"data retrieved\");\r\n          res.status(200).json({ status: 200, data: results });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      res.status(503).json({ status: 503, err });\r\n    }\r\n  });\r\n\r\n\r\n  app.get(\"/mi\", (req, res) => {\r\n    try {\r\n      db.query('SELECT id, title, category, image, author, date, CONCAT(SUBSTRING(shortdesc, 1, 255), \".\") as shortdesc, `desc`, checkbox FROM post WHERE category = \"MI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\r\n        if (err) {\r\n          // console.log(err);\r\n          res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n        } else {\r\n          // console.log(\"data retrieved\");\r\n          res.status(200).json({ status: 200, data: results });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      res.status(503).json({ status: 503, err });\r\n    }\r\n  });\r\n  \r\n  \r\n//home lenovo category\r\napp.get(\"/lenovo\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, category, image, author, date, shortdesc, `desc`, checkbox FROM post WHERE category = \"LENOVO\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\n//xiaomi data\r\napp.get(\"/xiaomi\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"XIAOMI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 3', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n//sasung\r\napp.get(\"/samsung\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"SAMSUNG\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\n\r\n//delete posted \r\napp.delete(\"/posted/:id\", (req, res) => {\r\n  const postId = req.params.id;\r\n  // console.log(postId)\r\n  const q = \"DELETE FROM post WHERE id = ?\"\r\n\r\n  db.query(q,[postId], (err,data) => {\r\n    // console.log(\"data is the \",data)\r\n    if(err) return res.json(err)\r\n    // console.log(\"data deleted\")\r\n    return res.json(\"data deleted\")\r\n })\r\n})\r\n\r\n//single full post\r\n\r\napp.get(\"/selectpost/:id\", (req, res) => {\r\n  const postId = req.params.id;\r\n  // console.log(\"post id is the\", postId);\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image,\r\n    p.metatitle, p.metaDescription, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE p.id = ${postId} AND p.checkbox = \"true\" `;\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error fetching post:', error);\r\n      res.status(500).json({ error: 'Error fetching post' });\r\n    } else {\r\n      if (results.length === 0) {\r\n        // No result found for the provided post ID\r\n        res.status(404).json({ error: 'Post not found' });\r\n      } else {\r\n        const post = results[0];\r\n        res.json(post);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n\r\n//latest 3 blog post related\r\napp.get(\"/latestblog/:id\", (req, res) => {\r\n  const postid = req.params.id;\r\n  // console.log(\"post id is the id\", postid);\r\n\r\n const query = `\r\n  SELECT p.id, p.category_id, p.title, p.author, p.date, \r\n  p.category, p.desc, p.shortdesc, p.image, p.metatitle, p.metaDescription, p.checkbox\r\n  FROM post p\r\n  INNER JOIN category c ON p.category_id = c.id\r\n  WHERE p.category_id = (\r\n    SELECT category_id\r\n    FROM post\r\n    WHERE id = ${postid}\r\n  )\r\n  AND p.id != ${postid}\r\n  AND p.checkbox = \"true\"\r\n  LIMIT 3 OFFSET 0`;\r\n\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error fetching posts:', error);\r\n      res.status(500).json({ error: 'Error fetching posts' });\r\n    } else {\r\n      if (results.length === 0) {\r\n        // No results found for the provided post ID\r\n        res.status(404).json({ error: 'Data not found' });\r\n      } else {\r\n        const posts = results;\r\n        res.json(posts);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n\r\n// all post fetch\r\napp.get(\"/post\", (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n  try {\r\n    const query = `SELECT  shortdesc, id, title, image, author, date FROM post WHERE sat = \"publish\"\r\n     AND checkbox = \"true\"\r\n     LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n    const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\r\n\r\n    db.query(query, (error, results) => {\r\n      if (error) {\r\n        console.error('Error executing fetch all posts query:', error);\r\n        res.status(500).json({ error: 'Error executing query' });\r\n      } else {\r\n        // Fetch the total count of posts\r\n        db.query(countPostsQuery, (error, countResult) => {\r\n          if (error) {\r\n            console.error('Error executing count posts query:', error);\r\n            res.status(500).json({ error: 'Error executing query' });\r\n          } else {\r\n            const totalCount = countResult[0].total;\r\n            const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n            res.json({ results, totalPages });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error('Error executing fetch all posts:', err);\r\n    res.status(503).json({ error: 'Error executing query' });\r\n  }\r\n});\r\n\r\n\r\n//allpostcard\r\napp.get(\"/allpostcard\", (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n  \r\n  try {\r\n    const query = `SELECT id, title, CONCAT(SUBSTRING(shortdesc, 1, 100),\".\") as shortdesc, image, author, date FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n    const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\r\n\r\n    db.query(query, (error, results) => {\r\n      if (error) {\r\n        console.error('Error executing fetch all posts query:', error);\r\n        res.status(500).json({ error: 'Error executing query' });\r\n      } else {\r\n        // Fetch the total count of posts\r\n        db.query(countPostsQuery, (error, countResult) => {\r\n          if (error) {\r\n            console.error('Error executing count posts query:', error);\r\n            res.status(500).json({ error: 'Error executing query' });\r\n          } else {\r\n            const totalCount = countResult[0].total;\r\n            const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n            res.json({ results, totalPages });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error('Error executing fetch all posts:', err);\r\n    res.status(503).json({ error: 'Error executing query' });\r\n  }\r\n});\r\n\r\n\r\n\r\n//specific blog post fetch \r\napp.get(\"/categoryPage/:id\", (req, res) => {\r\n  const categoryId = req.params.id;\r\n  // console.log(\"category id is the\", categoryId);\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2; // Updated pageSizeNumber to 3\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE c.id = ${categoryId} AND p.checkbox = \"true\" AND p.sat = \"publish\"\r\n    LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n\r\n  const countPostsQuery = `SELECT COUNT(*) AS total FROM post WHERE category_id = ${categoryId} AND checkbox = \"true\" AND sat = \"publish\"`;\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts for the specific category\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n//fetch id using to category related subcategory data \r\napp.get(\"/categoryRelatedSubcategoryPost/:id\", (req, res) => {\r\n  const categoryId = req.params.id;\r\n  // console.log(\"category id is\", categoryId);\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, \r\n          shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id \r\n    WHERE c.parentid = ? AND p.checkbox = \"true\" LIMIT 3`;\r\n\r\n  db.query(query, [categoryId], (error, results) => {\r\n    if (error) {\r\n      console.error('Error fetching posts:', error);\r\n      res.status(500).json({ error: 'Error fetching posts' });\r\n    } else {\r\n      if (results.length === 0) {\r\n        // No results found for the provided categoryId\r\n        res.status(401).json({ error: 'Data not found' });\r\n      } else {\r\n        res.json(results);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//specific blog post fetch to subcategory\r\napp.get(\"/subcategoryPage/:id\", (req, res) => {\r\n  const Cateid = req.params.id;\r\n// console.log(\"category id is\", Cateid);\r\n\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE c.id = ${Cateid} AND p.checkbox = \"true\" LIMIT 2`;\r\n\r\n    db.query(query, (error, results) => {\r\n      if (error) {\r\n        console.error('Error fetching posts:', error);\r\n        res.status(500).json({ error: 'Error fetching posts' });\r\n      } else {\r\n        if (results.length === 0) {\r\n          // No results found for the provided categoryId\r\n          res.status(401).json({ error: 'Data not found' });\r\n        } else {\r\n          res.json(results);\r\n        }\r\n      }\r\n    });\r\n});\r\n\r\n\r\n//search user anything\r\napp.get(\"/searchpage\", (req, res) => {\r\n  const searchTerm = req.query.q;\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n\r\n  // console.log(\"searchTerm is the name \", searchTerm);\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date,\r\n      p.category, p.desc, p.shortdesc, SUBSTRING(p.shortdesc, 1, 80) AS shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE (p.title LIKE '%${searchTerm}%'\r\n        OR p.category LIKE '%${searchTerm}%'\r\n        OR p.desc LIKE '%${searchTerm}%'\r\n        OR p.shortdesc LIKE '%${searchTerm}%')\r\n        AND p.checkbox = 'true'\r\n    LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n\r\n  const countPostsQuery = `\r\n    SELECT COUNT(*) AS total\r\n    FROM post\r\n    WHERE (title LIKE '%${searchTerm}%'\r\n        OR category LIKE '%${searchTerm}%'\r\n        OR \\`desc\\` LIKE '%${searchTerm}%'\r\n        OR shortdesc LIKE '%${searchTerm}%')\r\n        AND checkbox = 'true'`;\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n// admin get category \r\napp.get(\"/admincate\", (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n\r\n  // console.log(\"number\",pageNumber)\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  // console.log(\"pasizenumber\",pageSizeNumber)\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n  // console.log(offset)\r\n  try {\r\n  const query = `SELECT * FROM category LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n  const countPostsQuery = 'SELECT COUNT(*) AS total FROM category';\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\ncatch (err) {\r\n  console.error('Error executing fetch all posts:', err);\r\n  res.status(503).json({ error: 'Error executing query' });\r\n}\r\n})\r\n\r\n\r\n//pagination of the post\r\napp.get('/posts', (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2; // Update pageSizeNumber to 4\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n\r\n  // Fetch all posts from the database with pagination\r\n  const fetchAllPostsQuery = `SELECT * FROM post LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n  const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\r\n\r\n  db.query(fetchAllPostsQuery, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"}},"mtime":1693569227466},"{\"assumptions\":{},\"sourceRoot\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\",\"filename\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\\\\server.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\shaared\\\\reactjs\\\\poster\\\\backend\",\"rootMode\":\"root\",\"plugins\":[{\"key\":\"syntax-jsx\",\"visitor\":{},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-react-jsx\",\"visitor\":{\"JSXNamespacedName\":{\"enter\":[null]},\"JSXSpreadChild\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"JSXFragment\":{\"exit\":[null]},\"JSXElement\":{\"exit\":[null]},\"JSXAttribute\":{\"enter\":[null]}},\"options\":{\"pragma\":\"React.createElement\",\"pragmaFrag\":\"React.Fragment\",\"runtime\":\"classic\",\"throwIfNamespace\":true,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-react-display-name\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-react-pure-annotations\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{},\"externalDependencies\":[]},{\"key\":\"transform-unicode-sets-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-static-block\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-private-property-in-object\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-class-properties\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-numeric-separator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-nullish-coalescing-operator\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-chaining\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-json-strings\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-optional-catch-binding\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-async-generators\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-object-rest-spread\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-dynamic-import\",\"visitor\":{\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"transform-export-namespace-from\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-top-level-await\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]},{\"key\":\"syntax-import-meta\",\"visitor\":{},\"options\":{\"spec\":false,\"useBuiltIns\":false},\"externalDependencies\":[]}],\"presets\":[]}:7.22.11:development":{"value":{"code":"\"use strict\";\n\nconst express = require(\"express\");\nconst mysql = require(\"mysql\");\nconst cors = require(\"cors\");\nconst multer = require(\"multer\");\nconst moment = require(\"moment\");\nconst path = require('path');\nconst fs = require('fs');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\nconst App = require('../client/src/App');\nconst app = express();\nconst PORT = process.env.PORT || 8000;\nconst db = mysql.createConnection({\n  host: 'localhost',\n  port: '3306',\n  user: \"root\",\n  password: \"admin@123\",\n  database: \"test\"\n});\ndb.connect(error => {\n  if (error) {\n    console.error('MySQL connection error:', error);\n    return;\n  }\n  console.log('Connected to MySQL server');\n});\napp.use(express.json());\napp.use(cors());\napp.use(\"/uploads\", express.static(\"./uploads\"));\napp.use(express.static('public'));\napp.get('/', (req, res) => {\n  const html = ReactDOMServer.renderToString( /*#__PURE__*/React.createElement(App, null));\n  res.send(`\n    <html>\n      <head>\n        <title>Server-side Rendering with React</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n      </body>\n    </html>\n  `);\n});\n// user na mate categorylist\napp.get(\"/getactivecategory\", (req, res) => {\n  const q = \"SELECT * FROM category WHERE catecheck = 1 ORDER BY `order`\";\n  db.query(q, (err, data) => {\n    if (err) {\n      console.error(err);\n      return res.status(500).json({\n        error: \"Failed to fetch categories\"\n      });\n    }\n    let maincategoryresult = [];\n    let subcategoryresult = [];\n    for (let i = 0; i < data.length; i++) {\n      let parentid = data[i].parentid;\n      if (parentid > 0) {\n        subcategoryresult.push(data[i]);\n      } else {\n        var obj = {};\n        obj[\"id\"] = data[i].id;\n        obj[\"name\"] = data[i].title;\n        obj[\"subcategorylist\"] = [];\n        maincategoryresult.push(obj);\n      }\n    }\n    if (subcategoryresult.length > 0) {\n      for (let i = 0; i < maincategoryresult.length; i++) {\n        let parentid = maincategoryresult[i].id;\n        let subcategorylist = [];\n        for (let j = 0; j < subcategoryresult.length; j++) {\n          if (parentid == subcategoryresult[j].parentid) {\n            var obj = {};\n            obj[\"id\"] = subcategoryresult[j].id;\n            obj[\"name\"] = subcategoryresult[j].title;\n            subcategorylist.push(obj);\n          }\n        }\n        maincategoryresult[i].subcategorylist = subcategorylist;\n      }\n    }\n\n    // Limit the number of main categories to 6\n    maincategoryresult = maincategoryresult.slice(0, 6);\n    return res.json(maincategoryresult);\n  });\n});\n\n//dropdown category fill\napp.get(\"/dropfill\", (req, res) => {\n  const q = \"SELECT id,title FROM category \";\n  db.query(q, (err, data) => {\n    // console.log(\"backend all data show \",data)\n    if (err) return res.json(err);\n    return res.json(data);\n  });\n});\n\n// admin insert category\napp.post(\"/admincate\", (req, res) => {\n  const {\n    title,\n    catecheck\n  } = req.body;\n  if (!title) {\n    return res.status(422).json({\n      error: \"Please enter a title\"\n    });\n  }\n  const q = \"INSERT INTO category (`title`, `catecheck`) VALUES (?, ?)\";\n  const values = [title, catecheck];\n  // console.log(\"values is the olption\", values)\n\n  db.query(q, values, (err, data) => {\n    if (err) {\n      // console.log(err);\n      return res.status(500).json({\n        error: \"Failed to insert data into the category\"\n      });\n    }\n\n    // console.log(\"Data is inserted into the category\");\n    return res.json(\"Data is inserted into the category\");\n  });\n});\n\n//user category\napp.post(\"/getactivecate\", (req, res) => {\n  const q = \"INSERT INTO category (`title`) VALUES (?)\";\n  const values = [req.body.title];\n  // console.log(\"values\", values)\n  if (values == \"\" || !values) {\n    return res.status(422).json({\n      error: \"please not empty field is enter\"\n    });\n  } else {\n    db.query(q, [values], (err, data) => {\n      // console.log(\"data is the \",data)\n      if (err) return res.json(err);\n      // console.log(\"in category data is inserted\")\n      return res.json(\"in category data is inserted\");\n    });\n  }\n});\napp.get(\"/admin\", (req, res) => {\n  const q = \"SELECT * FROM admin\";\n  db.query(q, (err, data) => {\n    console.log(\"backend all data show \", data);\n    if (err) return res.json(err);\n    return res.json(data);\n  });\n});\n\n//admin enter the login page\napp.post(\"/admin\", (req, res) => {\n  let email = req.body.email;\n  let password = req.body.password;\n  console.log(\"email & password\", email, password);\n  const q = \"INSERT INTO admin (`email`, `password`) VALUES ?\"; // Note the change in the query\n\n  if (email === \"\" || password === \"\") {\n    res.status(500).send(\"Plz enter the data\");\n  } else {\n    const query = `SELECT * FROM admin WHERE email = ?`;\n    db.query(query, [email], (error, results) => {\n      if (error) {\n        console.error(\"Error querying the database:\", error);\n        res.status(500).send(\"An error occurred\");\n      } else {\n        if (results.length > 0) {\n          if (results[0].password === password) {\n            return res.json(\"Login successful\");\n          } else {\n            res.status(401).send(\"Incorrect password\");\n          }\n        } else {\n          const values = [[email, password]];\n          db.query(q, [values], (err, data) => {\n            if (err) {\n              console.error(\"Error inserting data into the database:\", err);\n              return res.status(500).json(err);\n            }\n            console.log(\"Data is inserted into the admin table:\", data);\n            return res.json(\"Data is inserted into the admin table\");\n          });\n        }\n      }\n    });\n  }\n});\napp.delete(\"/admincate/:id\", (req, res) => {\n  const cateId = req.params.id;\n  // console.log(cateId)\n  const q = \"DELETE FROM category WHERE id = ?\";\n  db.query(q, [cateId], (err, data) => {\n    // console.log(\"data is the \",data)\n    if (err) return res.json(err);\n    // console.log(\"deleted\")\n    return res.json(\"deleted\");\n  });\n});\napp.put(\"/admincate/:id\", (req, res) => {\n  const cateId = req.params.id;\n  const {\n    title,\n    catecheck\n  } = req.body;\n\n  // console.log(\"id is the\" , cateId)\n\n  // console.log(\"values is the \",title, catecheck)\n  const q = \"UPDATE category SET `title` = ?, `catecheck` = ? WHERE id = ?\";\n  const values = [title, catecheck, cateId];\n  db.query(q, values, (err, data) => {\n    if (err) {\n      // console.log(err);\n      return res.status(500).json({\n        error: \"Failed to update the category\"\n      });\n    }\n\n    // console.log(\"Data is updated in the category\");\n    return res.json(\"Data is updated in the category\");\n  });\n});\n\n/////////////////////////////////////////////////////////////\n\nvar imgconfig = multer.diskStorage({\n  destination: (req, file, callback) => {\n    callback(null, \"./uploads\");\n  },\n  filename: (req, file, callback) => {\n    callback(null, `${file.originalname}`);\n  }\n});\n\n//img filter\nconst isImg = (req, file, callback) => {\n  if (file.mimetype.startsWith(\"image\")) {\n    callback(null, true);\n  } else {\n    callback(null, Error(\"only image is allowed\"));\n  }\n};\nvar upload = multer({\n  storage: imgconfig,\n  fileFilter: isImg\n});\n// console.log(\"upload is images \",upload)\n\n//posted insert data for the admin\napp.post(\"/posted\", upload.single(\"photo\"), (req, res) => {\n  const {\n    title,\n    author,\n    shortdesc,\n    desc,\n    category,\n    sat,\n    checkbox,\n    metaTitle,\n    metaDescription\n  } = req.body;\n  const filename = req.file ? req.file.filename : null;\n\n  // console.log(\"check box values is the \",checkbox)\n\n  if (!title || !desc || !filename || !sat) {\n    res.status(422).json({\n      status: 422,\n      message: \"fill all details\"\n    });\n    return;\n  }\n  try {\n    let date = moment(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\n    db.query(\"SELECT id FROM category WHERE title = ?\", [category], (err, result) => {\n      if (err) {\n        // console.log(\"error\", err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal server error\"\n        });\n        return;\n      }\n      if (result.length === 0) {\n        res.status(404).json({\n          status: 404,\n          message: \"Category not found\"\n        });\n        return;\n      }\n      const categoryId = result[0].id;\n      const post = {\n        title,\n        categoryid: categoryId,\n        author,\n        image: filename,\n        shortdesc,\n        desc,\n        category,\n        sat,\n        date,\n        checkbox,\n        metaTitle,\n        metaDescription\n      };\n      db.query(\"INSERT INTO post SET ?\", post, (err, result) => {\n        if (err) {\n          // console.log(\"error\", err);\n          res.status(500).json({\n            status: 500,\n            message: \"Internal server error\"\n          });\n        } else {\n          // console.log(\"data added\", result);\n          res.status(200).json({\n            message: \"post upload successful\",\n            result\n          });\n        }\n      });\n    });\n  } catch (err) {\n    res.status(422).json({\n      status: 422,\n      err\n    });\n  }\n});\n\n//all post view \napp.get(\"/update/:id\", (req, res) => {\n  const sql = \"SELECT * FROM post WHERE id = ?\";\n  const id = req.params.id;\n  db.query(sql, [id], (err, result) => {\n    if (err) return res.json({\n      Error: err\n    });\n    return res.json(result);\n  });\n});\n\n//update all post for the admin\n\napp.put(\"/update/:id\", upload.single(\"photo\"), (req, res) => {\n  const cateId = req.params.id;\n  // console.log(\"cateID\",cateId);\n\n  const {\n    id,\n    title,\n    author,\n    shortdesc,\n    desc,\n    category,\n    sat,\n    checkbox,\n    metatitle,\n    metaDescription\n  } = req.body;\n  const filename = req.file ? req.file.filename : null;\n  db.query(\"SELECT id FROM category WHERE title = ?\", [category], (err, result) => {\n    if (err) {\n      // console.log(\"error\", err);\n      res.status(500).json({\n        status: 500,\n        message: \"Internal server error\"\n      });\n      return;\n    }\n    if (result.length === 0) {\n      res.status(404).json({\n        status: 404,\n        message: \"Category not found\"\n      });\n      return;\n    }\n    try {\n      let date = moment(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\n      const categoryid = result[0].id;\n\n      // console.log(\"categoryid is the\",categoryid)\n\n      const post = {\n        title,\n        category_id: categoryid,\n        author,\n        image: filename,\n        shortdesc,\n        desc,\n        category,\n        sat,\n        date,\n        checkbox,\n        metatitle,\n        metaDescription\n      };\n\n      // Update query based on whether a new file is uploaded\n      let query;\n      let params;\n      if (filename) {\n        query = \"UPDATE post SET `title`=?, `author`=?, `image`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?, `metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\n        params = [title, author, filename, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\n      } else {\n        query = \"UPDATE post SET `title`=?, `author`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?,`metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\n        params = [title, author, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\n      }\n      db.query(query, params, (err, result) => {\n        if (err) {\n          // console.log(\"error\", err);\n          res.status(500).json({\n            status: 500,\n            message: \"Internal Server Error\"\n          });\n        } else {\n          // console.log(\"data updated\", result);\n          res.status(200).json({\n            message: \"post update successful\",\n            result\n          });\n        }\n      });\n    } catch (err) {\n      res.status(422).json({\n        status: 422,\n        err\n      });\n    }\n  });\n});\n\n//posted view all for admin\napp.get(\"/posted\", (req, res) => {\n  try {\n    db.query('SELECT id, title, author, image, shortdesc,`desc`, category, sat, checkbox FROM post', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\napp.get(\"/postedUser\", (req, res) => {\n  try {\n    const titleCharacterLimit = 35; // Adjust the title character limit as needed\n    const shortdescCharacterLimit = 170; // Adjust the shortdesc character limit as needed\n\n    db.query('SELECT id, LEFT(title, ?) as title, author, image, CONCAT(LEFT(shortdesc, ?),\".\") as shortdesc, `desc`, category, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 1', [titleCharacterLimit, shortdescCharacterLimit], (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\napp.get(\"/relatedpost\", (req, res) => {\n  try {\n    db.query('SELECT id, CONCAT(SUBSTRING(title, 1, 44), \".\") AS title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\napp.get(\"/title\", (req, res) => {\n  try {\n    const titleCharacterLimit = 40; // Adjust the character limit as needed\n\n    db.query('SELECT id, CONCAT(LEFT(title, ?), \".\") as title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4', [titleCharacterLimit], (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\napp.get(\"/deals\", (req, res) => {\n  try {\n    db.query('SELECT id, title, image, author, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\n\n//card img title\napp.get(\"/card\", (req, res) => {\n  try {\n    db.query('SELECT id, title, image, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4 ', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\napp.get(\"/mi\", (req, res) => {\n  try {\n    db.query('SELECT id, title, category, image, author, date, CONCAT(SUBSTRING(shortdesc, 1, 255), \".\") as shortdesc, `desc`, checkbox FROM post WHERE category = \"MI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\n\n//home lenovo category\napp.get(\"/lenovo\", (req, res) => {\n  try {\n    db.query('SELECT id, title, category, image, author, date, shortdesc, `desc`, checkbox FROM post WHERE category = \"LENOVO\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\n\n//xiaomi data\napp.get(\"/xiaomi\", (req, res) => {\n  try {\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"XIAOMI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 3', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\n\n//sasung\napp.get(\"/samsung\", (req, res) => {\n  try {\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"SAMSUNG\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\n      if (err) {\n        // console.log(err);\n        res.status(500).json({\n          status: 500,\n          message: \"Internal Server Error\"\n        });\n      } else {\n        // console.log(\"data retrieved\");\n        res.status(200).json({\n          status: 200,\n          data: results\n        });\n      }\n    });\n  } catch (err) {\n    res.status(503).json({\n      status: 503,\n      err\n    });\n  }\n});\n\n//delete posted \napp.delete(\"/posted/:id\", (req, res) => {\n  const postId = req.params.id;\n  // console.log(postId)\n  const q = \"DELETE FROM post WHERE id = ?\";\n  db.query(q, [postId], (err, data) => {\n    // console.log(\"data is the \",data)\n    if (err) return res.json(err);\n    // console.log(\"data deleted\")\n    return res.json(\"data deleted\");\n  });\n});\n\n//single full post\n\napp.get(\"/selectpost/:id\", (req, res) => {\n  const postId = req.params.id;\n  // console.log(\"post id is the\", postId);\n\n  const query = `\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image,\n    p.metatitle, p.metaDescription, p.checkbox\n    FROM post p\n    INNER JOIN category c ON p.category_id = c.id\n    WHERE p.id = ${postId} AND p.checkbox = \"true\" `;\n  db.query(query, (error, results) => {\n    if (error) {\n      console.error('Error fetching post:', error);\n      res.status(500).json({\n        error: 'Error fetching post'\n      });\n    } else {\n      if (results.length === 0) {\n        // No result found for the provided post ID\n        res.status(404).json({\n          error: 'Post not found'\n        });\n      } else {\n        const post = results[0];\n        res.json(post);\n      }\n    }\n  });\n});\n\n//latest 3 blog post related\napp.get(\"/latestblog/:id\", (req, res) => {\n  const postid = req.params.id;\n  // console.log(\"post id is the id\", postid);\n\n  const query = `\n  SELECT p.id, p.category_id, p.title, p.author, p.date, \n  p.category, p.desc, p.shortdesc, p.image, p.metatitle, p.metaDescription, p.checkbox\n  FROM post p\n  INNER JOIN category c ON p.category_id = c.id\n  WHERE p.category_id = (\n    SELECT category_id\n    FROM post\n    WHERE id = ${postid}\n  )\n  AND p.id != ${postid}\n  AND p.checkbox = \"true\"\n  LIMIT 3 OFFSET 0`;\n  db.query(query, (error, results) => {\n    if (error) {\n      console.error('Error fetching posts:', error);\n      res.status(500).json({\n        error: 'Error fetching posts'\n      });\n    } else {\n      if (results.length === 0) {\n        // No results found for the provided post ID\n        res.status(404).json({\n          error: 'Data not found'\n        });\n      } else {\n        const posts = results;\n        res.json(posts);\n      }\n    }\n  });\n});\n\n// all post fetch\napp.get(\"/post\", (req, res) => {\n  const {\n    page,\n    pageSize\n  } = req.query;\n  const pageNumber = parseInt(page) || 1;\n  const pageSizeNumber = parseInt(pageSize) || 2;\n  const offset = (pageNumber - 1) * pageSizeNumber;\n  try {\n    const query = `SELECT  shortdesc, id, title, image, author, date FROM post WHERE sat = \"publish\"\n     AND checkbox = \"true\"\n     LIMIT ${pageSizeNumber} OFFSET ${offset}`;\n    const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\n    db.query(query, (error, results) => {\n      if (error) {\n        console.error('Error executing fetch all posts query:', error);\n        res.status(500).json({\n          error: 'Error executing query'\n        });\n      } else {\n        // Fetch the total count of posts\n        db.query(countPostsQuery, (error, countResult) => {\n          if (error) {\n            console.error('Error executing count posts query:', error);\n            res.status(500).json({\n              error: 'Error executing query'\n            });\n          } else {\n            const totalCount = countResult[0].total;\n            const totalPages = Math.ceil(totalCount / pageSizeNumber);\n            res.json({\n              results,\n              totalPages\n            });\n          }\n        });\n      }\n    });\n  } catch (err) {\n    console.error('Error executing fetch all posts:', err);\n    res.status(503).json({\n      error: 'Error executing query'\n    });\n  }\n});\n\n//allpostcard\napp.get(\"/allpostcard\", (req, res) => {\n  const {\n    page,\n    pageSize\n  } = req.query;\n  const pageNumber = parseInt(page) || 1;\n  const pageSizeNumber = parseInt(pageSize) || 2;\n  const offset = (pageNumber - 1) * pageSizeNumber;\n  try {\n    const query = `SELECT id, title, CONCAT(SUBSTRING(shortdesc, 1, 100),\".\") as shortdesc, image, author, date FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT ${pageSizeNumber} OFFSET ${offset}`;\n    const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\n    db.query(query, (error, results) => {\n      if (error) {\n        console.error('Error executing fetch all posts query:', error);\n        res.status(500).json({\n          error: 'Error executing query'\n        });\n      } else {\n        // Fetch the total count of posts\n        db.query(countPostsQuery, (error, countResult) => {\n          if (error) {\n            console.error('Error executing count posts query:', error);\n            res.status(500).json({\n              error: 'Error executing query'\n            });\n          } else {\n            const totalCount = countResult[0].total;\n            const totalPages = Math.ceil(totalCount / pageSizeNumber);\n            res.json({\n              results,\n              totalPages\n            });\n          }\n        });\n      }\n    });\n  } catch (err) {\n    console.error('Error executing fetch all posts:', err);\n    res.status(503).json({\n      error: 'Error executing query'\n    });\n  }\n});\n\n//specific blog post fetch \napp.get(\"/categoryPage/:id\", (req, res) => {\n  const categoryId = req.params.id;\n  // console.log(\"category id is the\", categoryId);\n  const {\n    page,\n    pageSize\n  } = req.query;\n  const pageNumber = parseInt(page) || 1;\n  const pageSizeNumber = parseInt(pageSize) || 2; // Updated pageSizeNumber to 3\n  const offset = (pageNumber - 1) * pageSizeNumber;\n  const query = `\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, shortdesc, p.image, p.checkbox\n    FROM post p\n    INNER JOIN category c ON p.category_id = c.id\n    WHERE c.id = ${categoryId} AND p.checkbox = \"true\" AND p.sat = \"publish\"\n    LIMIT ${pageSizeNumber} OFFSET ${offset}`;\n  const countPostsQuery = `SELECT COUNT(*) AS total FROM post WHERE category_id = ${categoryId} AND checkbox = \"true\" AND sat = \"publish\"`;\n  db.query(query, (error, results) => {\n    if (error) {\n      console.error('Error executing fetch all posts query:', error);\n      res.status(500).json({\n        error: 'Error executing query'\n      });\n    } else {\n      // Fetch the total count of posts for the specific category\n      db.query(countPostsQuery, (error, countResult) => {\n        if (error) {\n          console.error('Error executing count posts query:', error);\n          res.status(500).json({\n            error: 'Error executing query'\n          });\n        } else {\n          const totalCount = countResult[0].total;\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\n          res.json({\n            results,\n            totalPages\n          });\n        }\n      });\n    }\n  });\n});\n\n//fetch id using to category related subcategory data \napp.get(\"/categoryRelatedSubcategoryPost/:id\", (req, res) => {\n  const categoryId = req.params.id;\n  // console.log(\"category id is\", categoryId);\n\n  const query = `\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, \n          shortdesc, p.image, p.checkbox\n    FROM post p\n    INNER JOIN category c ON p.category_id = c.id \n    WHERE c.parentid = ? AND p.checkbox = \"true\" LIMIT 3`;\n  db.query(query, [categoryId], (error, results) => {\n    if (error) {\n      console.error('Error fetching posts:', error);\n      res.status(500).json({\n        error: 'Error fetching posts'\n      });\n    } else {\n      if (results.length === 0) {\n        // No results found for the provided categoryId\n        res.status(401).json({\n          error: 'Data not found'\n        });\n      } else {\n        res.json(results);\n      }\n    }\n  });\n});\n\n//specific blog post fetch to subcategory\napp.get(\"/subcategoryPage/:id\", (req, res) => {\n  const Cateid = req.params.id;\n  // console.log(\"category id is\", Cateid);\n\n  const query = `\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image, p.checkbox\n    FROM post p\n    INNER JOIN category c ON p.category_id = c.id\n    WHERE c.id = ${Cateid} AND p.checkbox = \"true\" LIMIT 2`;\n  db.query(query, (error, results) => {\n    if (error) {\n      console.error('Error fetching posts:', error);\n      res.status(500).json({\n        error: 'Error fetching posts'\n      });\n    } else {\n      if (results.length === 0) {\n        // No results found for the provided categoryId\n        res.status(401).json({\n          error: 'Data not found'\n        });\n      } else {\n        res.json(results);\n      }\n    }\n  });\n});\n\n//search user anything\napp.get(\"/searchpage\", (req, res) => {\n  const searchTerm = req.query.q;\n  const {\n    page,\n    pageSize\n  } = req.query;\n  const pageNumber = parseInt(page) || 1;\n  const pageSizeNumber = parseInt(pageSize) || 2;\n  const offset = (pageNumber - 1) * pageSizeNumber;\n\n  // console.log(\"searchTerm is the name \", searchTerm);\n  const query = `\n    SELECT p.id, p.category_id, p.title, p.author, p.date,\n      p.category, p.desc, p.shortdesc, SUBSTRING(p.shortdesc, 1, 80) AS shortdesc, p.image, p.checkbox\n    FROM post p\n    INNER JOIN category c ON p.category_id = c.id\n    WHERE (p.title LIKE '%${searchTerm}%'\n        OR p.category LIKE '%${searchTerm}%'\n        OR p.desc LIKE '%${searchTerm}%'\n        OR p.shortdesc LIKE '%${searchTerm}%')\n        AND p.checkbox = 'true'\n    LIMIT ${pageSizeNumber} OFFSET ${offset}`;\n  const countPostsQuery = `\n    SELECT COUNT(*) AS total\n    FROM post\n    WHERE (title LIKE '%${searchTerm}%'\n        OR category LIKE '%${searchTerm}%'\n        OR \\`desc\\` LIKE '%${searchTerm}%'\n        OR shortdesc LIKE '%${searchTerm}%')\n        AND checkbox = 'true'`;\n  db.query(query, (error, results) => {\n    if (error) {\n      console.error('Error executing fetch all posts query:', error);\n      res.status(500).json({\n        error: 'Error executing query'\n      });\n    } else {\n      // Fetch the total count of posts\n      db.query(countPostsQuery, (error, countResult) => {\n        if (error) {\n          console.error('Error executing count posts query:', error);\n          res.status(500).json({\n            error: 'Error executing query'\n          });\n        } else {\n          const totalCount = countResult[0].total;\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\n          res.json({\n            results,\n            totalPages\n          });\n        }\n      });\n    }\n  });\n});\n\n// admin get category \napp.get(\"/admincate\", (req, res) => {\n  const {\n    page,\n    pageSize\n  } = req.query;\n  const pageNumber = parseInt(page) || 1;\n\n  // console.log(\"number\",pageNumber)\n  const pageSizeNumber = parseInt(pageSize) || 2;\n  // console.log(\"pasizenumber\",pageSizeNumber)\n  const offset = (pageNumber - 1) * pageSizeNumber;\n  // console.log(offset)\n  try {\n    const query = `SELECT * FROM category LIMIT ${pageSizeNumber} OFFSET ${offset}`;\n    const countPostsQuery = 'SELECT COUNT(*) AS total FROM category';\n    db.query(query, (error, results) => {\n      if (error) {\n        console.error('Error executing fetch all posts query:', error);\n        res.status(500).json({\n          error: 'Error executing query'\n        });\n      } else {\n        // Fetch the total count of posts\n        db.query(countPostsQuery, (error, countResult) => {\n          if (error) {\n            console.error('Error executing count posts query:', error);\n            res.status(500).json({\n              error: 'Error executing query'\n            });\n          } else {\n            const totalCount = countResult[0].total;\n            const totalPages = Math.ceil(totalCount / pageSizeNumber);\n            res.json({\n              results,\n              totalPages\n            });\n          }\n        });\n      }\n    });\n  } catch (err) {\n    console.error('Error executing fetch all posts:', err);\n    res.status(503).json({\n      error: 'Error executing query'\n    });\n  }\n});\n\n//pagination of the post\napp.get('/posts', (req, res) => {\n  const {\n    page,\n    pageSize\n  } = req.query;\n  const pageNumber = parseInt(page) || 1;\n  const pageSizeNumber = parseInt(pageSize) || 2; // Update pageSizeNumber to 4\n  const offset = (pageNumber - 1) * pageSizeNumber;\n\n  // Fetch all posts from the database with pagination\n  const fetchAllPostsQuery = `SELECT * FROM post LIMIT ${pageSizeNumber} OFFSET ${offset}`;\n  const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\n  db.query(fetchAllPostsQuery, (error, results) => {\n    if (error) {\n      console.error('Error executing fetch all posts query:', error);\n      res.status(500).json({\n        error: 'Error executing query'\n      });\n    } else {\n      // Fetch the total count of posts\n      db.query(countPostsQuery, (error, countResult) => {\n        if (error) {\n          console.error('Error executing count posts query:', error);\n          res.status(500).json({\n            error: 'Error executing query'\n          });\n        } else {\n          const totalCount = countResult[0].total;\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\n          res.json({\n            results,\n            totalPages\n          });\n        }\n      });\n    }\n  });\n});\napp.listen(PORT, () => {\n  console.log(`Server is listening on port ${PORT}`);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"names":["express","require","mysql","cors","multer","moment","path","fs","React","ReactDOMServer","App","app","PORT","process","env","db","createConnection","host","port","user","password","database","connect","error","console","log","use","json","static","get","req","res","html","renderToString","createElement","send","q","query","err","data","status","maincategoryresult","subcategoryresult","i","length","parentid","push","obj","id","title","subcategorylist","j","slice","post","catecheck","body","values","email","results","delete","cateId","params","put","imgconfig","diskStorage","destination","file","callback","filename","originalname","isImg","mimetype","startsWith","Error","upload","storage","fileFilter","single","author","shortdesc","desc","category","sat","checkbox","metaTitle","metaDescription","message","date","Date","format","result","categoryId","categoryid","image","sql","metatitle","category_id","titleCharacterLimit","shortdescCharacterLimit","postId","postid","posts","page","pageSize","pageNumber","parseInt","pageSizeNumber","offset","countPostsQuery","countResult","totalCount","total","totalPages","Math","ceil","Cateid","searchTerm","fetchAllPostsQuery","listen"],"sourceRoot":"C:\\shaared\\reactjs\\poster\\backend\\","sources":["server.js"],"sourcesContent":["const express = require(\"express\");\r\nconst mysql = require(\"mysql\");\r\nconst cors = require(\"cors\");\r\nconst multer = require(\"multer\");\r\nconst moment = require(\"moment\");\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst React = require('react');\r\nconst ReactDOMServer = require('react-dom/server');\r\n\r\nconst App = require('../client/src/App')\r\n\r\n\r\n\r\nconst app = express(); \r\nconst PORT = process.env.PORT || 8000;\r\nconst db = mysql.createConnection ({\r\n    host: 'localhost', \r\n    port: '3306',\r\n    user: \"root\",\r\n    password : \"admin@123\",\r\n    database : \"test\"\r\n})\r\n\r\ndb.connect((error) => {\r\n  if (error) {\r\n    console.error('MySQL connection error:', error);\r\n    return;\r\n  }\r\n  console.log('Connected to MySQL server');\r\n});\r\n\r\napp.use(express.json());\r\napp.use(cors());\r\napp.use(\"/uploads\",express.static(\"./uploads\"));\r\n\r\napp.use(express.static('public'));\r\n\r\napp.get('/', (req, res) => {\r\n  const html = ReactDOMServer.renderToString(<App />);\r\n\r\n  res.send(`\r\n    <html>\r\n      <head>\r\n        <title>Server-side Rendering with React</title>\r\n      </head>\r\n      <body>\r\n        <div id=\"root\">${html}</div>\r\n      </body>\r\n    </html>\r\n  `);\r\n});\r\n// user na mate categorylist\r\napp.get(\"/getactivecategory\", (req, res) => {\r\n  const q = \"SELECT * FROM category WHERE catecheck = 1 ORDER BY `order`\";\r\n  db.query(q, (err, data) => {\r\n    if (err) {\r\n      console.error(err);\r\n      return res.status(500).json({ error: \"Failed to fetch categories\" });\r\n    }\r\n\r\n    let maincategoryresult = [];\r\n    let subcategoryresult = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      let parentid = data[i].parentid;\r\n      if (parentid > 0) {\r\n        subcategoryresult.push(data[i]);\r\n      } else {\r\n        var obj = {};\r\n        obj[\"id\"] = data[i].id;\r\n        obj[\"name\"] = data[i].title;\r\n        obj[\"subcategorylist\"] = [];\r\n        maincategoryresult.push(obj);\r\n      }\r\n    }\r\n\r\n    if (subcategoryresult.length > 0) {\r\n      for (let i = 0; i < maincategoryresult.length; i++) {\r\n        let parentid = maincategoryresult[i].id;\r\n        let subcategorylist = [];\r\n        for (let j = 0; j < subcategoryresult.length; j++) {\r\n          if (parentid == subcategoryresult[j].parentid) {\r\n            var obj = {};\r\n            obj[\"id\"] = subcategoryresult[j].id;\r\n            obj[\"name\"] = subcategoryresult[j].title;\r\n            subcategorylist.push(obj);\r\n          }\r\n        }\r\n        maincategoryresult[i].subcategorylist = subcategorylist;\r\n      }\r\n    }\r\n\r\n    // Limit the number of main categories to 6\r\n    maincategoryresult = maincategoryresult.slice(0, 6);\r\n\r\n    return res.json(maincategoryresult);\r\n  });\r\n});\r\n\r\n\r\n//dropdown category fill\r\napp.get(\"/dropfill\", (req, res) => {\r\n  const q = \"SELECT id,title FROM category \"\r\n  db.query(q,(err,data) => {\r\n    // console.log(\"backend all data show \",data)\r\n    if(err) return res.json(err)\r\n    return res.json(data)\r\n    \r\n  })\r\n})\r\n\r\n\r\n// admin insert category\r\napp.post(\"/admincate\", (req, res) => {\r\n  const { title, catecheck } = req.body;\r\n\r\n  if (!title) {\r\n    return res.status(422).json({ error: \"Please enter a title\" });\r\n  }\r\n\r\n  const q = \"INSERT INTO category (`title`, `catecheck`) VALUES (?, ?)\";\r\n  const values = [title, catecheck];\r\n  // console.log(\"values is the olption\", values)\r\n\r\n  db.query(q, values, (err, data) => {\r\n    if (err) {\r\n      // console.log(err);\r\n      return res.status(500).json({ error: \"Failed to insert data into the category\" });\r\n    }\r\n\r\n    // console.log(\"Data is inserted into the category\");\r\n    return res.json(\"Data is inserted into the category\");\r\n  });\r\n});\r\n\r\n\r\n\r\n//user category\r\napp.post(\"/getactivecate\", (req, res) => {\r\n  const q = \"INSERT INTO category (`title`) VALUES (?)\"\r\n  const values = [req.body.title]\r\n  // console.log(\"values\", values)\r\nif (values == \"\" || !values) {\r\nreturn res.status(422).json({error: \"please not empty field is enter\"}) \r\n}else{\r\n  db.query(q,[values], (err,data) => {\r\n      // console.log(\"data is the \",data)\r\n      if(err) return res.json(err)\r\n      // console.log(\"in category data is inserted\")\r\n      return res.json(\"in category data is inserted\")\r\n   })\r\n  }\r\n})\r\n\r\n\r\n\r\n\r\napp.get(\"/admin\", (req, res) =>{\r\n  const q = \"SELECT * FROM admin\"\r\n  db.query(q,(err,data) => {\r\n    console.log(\"backend all data show \",data)\r\n    if(err) return res.json(err)\r\n    return res.json(data)\r\n  })\r\n})\r\n\r\n\r\n//admin enter the login page\r\napp.post(\"/admin\", (req, res) => {\r\n  let email = req.body.email;\r\n  let password = req.body.password;\r\n\r\n  console.log(\"email & password\", email, password);\r\n\r\n  const q = \"INSERT INTO admin (`email`, `password`) VALUES ?\"; // Note the change in the query\r\n\r\n\r\n  if (email === \"\" || password === \"\") {\r\n    res.status(500).send(\"Plz enter the data\");\r\n  } else {\r\n    const query = `SELECT * FROM admin WHERE email = ?`;\r\n    db.query(query, [email], (error, results) => {\r\n      if (error) {\r\n        console.error(\"Error querying the database:\", error);\r\n        res.status(500).send(\"An error occurred\");\r\n      } else {\r\n        if (results.length > 0) {\r\n          \r\n          if (results[0].password === password) {\r\n            return res.json(\"Login successful\"); \r\n          } else {\r\n            res.status(401).send(\"Incorrect password\"); \r\n          }\r\n        } else {\r\n          const values = [[email, password]]; \r\n          db.query(q, [values], (err, data) => {\r\n            if (err) {\r\n              console.error(\"Error inserting data into the database:\", err);\r\n              return res.status(500).json(err);\r\n            }\r\n            console.log(\"Data is inserted into the admin table:\", data);\r\n            return res.json(\"Data is inserted into the admin table\");\r\n          });\r\n        }\r\n      }\r\n    });\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\napp.delete(\"/admincate/:id\", (req, res) => {\r\n  const cateId = req.params.id;\r\n  // console.log(cateId)\r\n  const q = \"DELETE FROM category WHERE id = ?\"\r\n\r\n  db.query(q,[cateId], (err,data) => {\r\n    // console.log(\"data is the \",data)\r\n    if(err) return res.json(err)\r\n    // console.log(\"deleted\")\r\n    return res.json(\"deleted\")\r\n })\r\n})\r\napp.put(\"/admincate/:id\", (req, res) => {\r\n  const cateId = req.params.id;\r\n  const { title, catecheck } = req.body;\r\n\r\n  // console.log(\"id is the\" , cateId)\r\n\r\n  // console.log(\"values is the \",title, catecheck)\r\n  const q = \"UPDATE category SET `title` = ?, `catecheck` = ? WHERE id = ?\";\r\n  const values = [title, catecheck, cateId];\r\n\r\n  db.query(q, values, (err, data) => {\r\n    if (err) {\r\n      // console.log(err);\r\n      return res.status(500).json({ error: \"Failed to update the category\" });\r\n    }\r\n\r\n    // console.log(\"Data is updated in the category\");\r\n    return res.json(\"Data is updated in the category\");\r\n  });\r\n});\r\n\r\n/////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n  var imgconfig = multer.diskStorage({\r\n    destination:(req,file,callback)=>{\r\n      callback(null,\"./uploads\");\r\n    },\r\n    filename:(req,file,callback)=>{\r\n      callback(null,`${file.originalname}`);\r\n    }\r\n  })\r\n\r\n//img filter\r\nconst isImg = (req,file,callback) =>{\r\n    if(file.mimetype.startsWith(\"image\")){\r\n      callback(null,true)\r\n    }else{\r\n      callback(null,Error(\"only image is allowed\"))\r\n    }\r\n}\r\n\r\nvar upload = multer({\r\n  storage:imgconfig,\r\n  fileFilter:isImg\r\n})\r\n// console.log(\"upload is images \",upload)\r\n\r\n\r\n//posted insert data for the admin\r\napp.post(\"/posted\", upload.single(\"photo\"), (req, res) => {\r\n  const { title, author, shortdesc, desc, category, sat, checkbox, metaTitle, metaDescription } = req.body;\r\n  const filename = req.file ? req.file.filename : null;\r\n\r\n  // console.log(\"check box values is the \",checkbox)\r\n\r\n  if (!title || !desc || !filename || !sat) {\r\n    res.status(422).json({ status: 422, message: \"fill all details\" });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    let date = moment(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\r\n\r\n    db.query(\"SELECT id FROM category WHERE title = ?\", [category], (err, result) => {\r\n      if (err) {\r\n        // console.log(\"error\", err);\r\n        res.status(500).json({ status: 500, message: \"Internal server error\" });\r\n        return;\r\n      }\r\n\r\n      if (result.length === 0) {\r\n        res.status(404).json({ status: 404, message: \"Category not found\" });\r\n        return;\r\n      }\r\n\r\n      const categoryId = result[0].id;\r\n\r\n      const post = {\r\n        \r\n        title,\r\n        categoryid: categoryId,\r\n        author,\r\n        image: filename,\r\n        shortdesc,\r\n        desc,\r\n        category,\r\n        sat,\r\n        date,\r\n        checkbox,\r\n        metaTitle,\r\n        metaDescription\r\n      };\r\n\r\n      db.query(\"INSERT INTO post SET ?\", post, (err, result) => {\r\n        if (err) {\r\n          // console.log(\"error\", err);\r\n          res.status(500).json({ status: 500, message: \"Internal server error\" });\r\n        } else {\r\n          // console.log(\"data added\", result);\r\n          res.status(200).json({ message: \"post upload successful\", result });\r\n        }\r\n      });\r\n    });\r\n  } catch (err) {\r\n    res.status(422).json({ status: 422, err });\r\n  }\r\n});\r\n\r\n//all post view \r\napp.get(\"/update/:id\", (req, res) => {\r\n  const sql = \"SELECT * FROM post WHERE id = ?\";\r\n  const id =req.params.id;\r\n  db.query(sql,[id], (err,result) => {\r\n    if(err) return res.json({Error : err});\r\n    return res.json(result)\r\n  })\r\n})\r\n\r\n\r\n\r\n//update all post for the admin\r\n\r\napp.put(\"/update/:id\", upload.single(\"photo\"), (req, res) => {\r\n  const cateId = req.params.id;\r\n  // console.log(\"cateID\",cateId);\r\n\r\n  const { id, title, author, shortdesc, desc, category, sat, checkbox, metatitle, metaDescription } = req.body;\r\n  const filename = req.file ? req.file.filename : null;\r\n\r\n  db.query(\"SELECT id FROM category WHERE title = ?\", [category], (err, result) => {\r\n    if (err) {\r\n      // console.log(\"error\", err);\r\n      res.status(500).json({ status: 500, message: \"Internal server error\" });\r\n      return;\r\n    }\r\n\r\n    if (result.length === 0) {\r\n      res.status(404).json({ status: 404, message: \"Category not found\" });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let date = moment(new Date()).format(\"YYYY-MM-DD hh:mm:ss\");\r\n\r\n      const categoryid = result[0].id;\r\n\r\n      // console.log(\"categoryid is the\",categoryid)\r\n\r\n      const post = {\r\n        title,\r\n        category_id: categoryid,\r\n        author,\r\n        image: filename,\r\n        shortdesc,\r\n        desc,\r\n        category,\r\n        sat,\r\n        date,\r\n        checkbox,\r\n        metatitle,\r\n        metaDescription\r\n      };\r\n\r\n      // Update query based on whether a new file is uploaded\r\n      let query;\r\n      let params;\r\n      if (filename) {\r\n        query = \"UPDATE post SET `title`=?, `author`=?, `image`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?, `metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\r\n        params = [title, author, filename, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\r\n      } else {\r\n        query = \"UPDATE post SET `title`=?, `author`=?, `shortdesc`=?, `desc`=?, `category`=?, `sat`=?, `date`=?, `checkbox`=?,`metatitle`=?, `metaDescription`=?, `category_id`=? WHERE id=?\";\r\n        params = [title, author, shortdesc, desc, category, sat, date, checkbox, metatitle, metaDescription, categoryid, cateId];\r\n      }\r\n\r\n      db.query(query, params, (err, result) => {\r\n        if (err) {\r\n          // console.log(\"error\", err);\r\n          res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n        } else {\r\n          // console.log(\"data updated\", result);\r\n          res.status(200).json({ message: \"post update successful\", result });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      res.status(422).json({ status: 422, err });\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//posted view all for admin\r\napp.get(\"/posted\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, author, image, shortdesc,`desc`, category, sat, checkbox FROM post', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\napp.get(\"/postedUser\", (req, res) => {\r\n  try {\r\n    const titleCharacterLimit = 35; // Adjust the title character limit as needed\r\n    const shortdescCharacterLimit = 170; // Adjust the shortdesc character limit as needed\r\n    \r\n    db.query('SELECT id, LEFT(title, ?) as title, author, image, CONCAT(LEFT(shortdesc, ?),\".\") as shortdesc, `desc`, category, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 1', [titleCharacterLimit, shortdescCharacterLimit], (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\napp.get(\"/relatedpost\", (req, res) => {\r\n  try {    \r\n    db.query('SELECT id, CONCAT(SUBSTRING(title, 1, 44), \".\") AS title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\napp.get(\"/title\", (req, res) => {\r\n  try {\r\n    const titleCharacterLimit = 40; // Adjust the character limit as needed\r\n    \r\n    db.query('SELECT id, CONCAT(LEFT(title, ?), \".\") as title, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4', [titleCharacterLimit], (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\napp.get(\"/deals\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, image, author, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 3 OFFSET 1', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n//card img title\r\n  app.get(\"/card\", (req, res) => {\r\n    try {\r\n      db.query('SELECT id, title, image, checkbox FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT 4 ', (err, results) => {\r\n        if (err) {\r\n          // console.log(err);\r\n          res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n        } else {\r\n          // console.log(\"data retrieved\");\r\n          res.status(200).json({ status: 200, data: results });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      res.status(503).json({ status: 503, err });\r\n    }\r\n  });\r\n\r\n\r\n  app.get(\"/mi\", (req, res) => {\r\n    try {\r\n      db.query('SELECT id, title, category, image, author, date, CONCAT(SUBSTRING(shortdesc, 1, 255), \".\") as shortdesc, `desc`, checkbox FROM post WHERE category = \"MI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\r\n        if (err) {\r\n          // console.log(err);\r\n          res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n        } else {\r\n          // console.log(\"data retrieved\");\r\n          res.status(200).json({ status: 200, data: results });\r\n        }\r\n      });\r\n    } catch (err) {\r\n      res.status(503).json({ status: 503, err });\r\n    }\r\n  });\r\n  \r\n  \r\n//home lenovo category\r\napp.get(\"/lenovo\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, category, image, author, date, shortdesc, `desc`, checkbox FROM post WHERE category = \"LENOVO\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\n//xiaomi data\r\napp.get(\"/xiaomi\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"XIAOMI\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 3', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n//sasung\r\napp.get(\"/samsung\", (req, res) => {\r\n  try {\r\n    db.query('SELECT id, title, category, image, author, date,  shortdesc, `desc`, checkbox FROM post WHERE category = \"SAMSUNG\" AND sat = \"publish\" AND checkbox = \"true\" LIMIT 4', (err, results) => {\r\n      if (err) {\r\n        // console.log(err);\r\n        res.status(500).json({ status: 500, message: \"Internal Server Error\" });\r\n      } else {\r\n        // console.log(\"data retrieved\");\r\n        res.status(200).json({ status: 200, data: results });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    res.status(503).json({ status: 503, err });\r\n  }\r\n});\r\n\r\n\r\n\r\n//delete posted \r\napp.delete(\"/posted/:id\", (req, res) => {\r\n  const postId = req.params.id;\r\n  // console.log(postId)\r\n  const q = \"DELETE FROM post WHERE id = ?\"\r\n\r\n  db.query(q,[postId], (err,data) => {\r\n    // console.log(\"data is the \",data)\r\n    if(err) return res.json(err)\r\n    // console.log(\"data deleted\")\r\n    return res.json(\"data deleted\")\r\n })\r\n})\r\n\r\n//single full post\r\n\r\napp.get(\"/selectpost/:id\", (req, res) => {\r\n  const postId = req.params.id;\r\n  // console.log(\"post id is the\", postId);\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image,\r\n    p.metatitle, p.metaDescription, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE p.id = ${postId} AND p.checkbox = \"true\" `;\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error fetching post:', error);\r\n      res.status(500).json({ error: 'Error fetching post' });\r\n    } else {\r\n      if (results.length === 0) {\r\n        // No result found for the provided post ID\r\n        res.status(404).json({ error: 'Post not found' });\r\n      } else {\r\n        const post = results[0];\r\n        res.json(post);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n\r\n//latest 3 blog post related\r\napp.get(\"/latestblog/:id\", (req, res) => {\r\n  const postid = req.params.id;\r\n  // console.log(\"post id is the id\", postid);\r\n\r\n const query = `\r\n  SELECT p.id, p.category_id, p.title, p.author, p.date, \r\n  p.category, p.desc, p.shortdesc, p.image, p.metatitle, p.metaDescription, p.checkbox\r\n  FROM post p\r\n  INNER JOIN category c ON p.category_id = c.id\r\n  WHERE p.category_id = (\r\n    SELECT category_id\r\n    FROM post\r\n    WHERE id = ${postid}\r\n  )\r\n  AND p.id != ${postid}\r\n  AND p.checkbox = \"true\"\r\n  LIMIT 3 OFFSET 0`;\r\n\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error fetching posts:', error);\r\n      res.status(500).json({ error: 'Error fetching posts' });\r\n    } else {\r\n      if (results.length === 0) {\r\n        // No results found for the provided post ID\r\n        res.status(404).json({ error: 'Data not found' });\r\n      } else {\r\n        const posts = results;\r\n        res.json(posts);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n\r\n// all post fetch\r\napp.get(\"/post\", (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n  try {\r\n    const query = `SELECT  shortdesc, id, title, image, author, date FROM post WHERE sat = \"publish\"\r\n     AND checkbox = \"true\"\r\n     LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n    const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\r\n\r\n    db.query(query, (error, results) => {\r\n      if (error) {\r\n        console.error('Error executing fetch all posts query:', error);\r\n        res.status(500).json({ error: 'Error executing query' });\r\n      } else {\r\n        // Fetch the total count of posts\r\n        db.query(countPostsQuery, (error, countResult) => {\r\n          if (error) {\r\n            console.error('Error executing count posts query:', error);\r\n            res.status(500).json({ error: 'Error executing query' });\r\n          } else {\r\n            const totalCount = countResult[0].total;\r\n            const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n            res.json({ results, totalPages });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error('Error executing fetch all posts:', err);\r\n    res.status(503).json({ error: 'Error executing query' });\r\n  }\r\n});\r\n\r\n\r\n//allpostcard\r\napp.get(\"/allpostcard\", (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n  \r\n  try {\r\n    const query = `SELECT id, title, CONCAT(SUBSTRING(shortdesc, 1, 100),\".\") as shortdesc, image, author, date FROM post WHERE sat = \"publish\" AND checkbox = \"true\" LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n    const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\r\n\r\n    db.query(query, (error, results) => {\r\n      if (error) {\r\n        console.error('Error executing fetch all posts query:', error);\r\n        res.status(500).json({ error: 'Error executing query' });\r\n      } else {\r\n        // Fetch the total count of posts\r\n        db.query(countPostsQuery, (error, countResult) => {\r\n          if (error) {\r\n            console.error('Error executing count posts query:', error);\r\n            res.status(500).json({ error: 'Error executing query' });\r\n          } else {\r\n            const totalCount = countResult[0].total;\r\n            const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n            res.json({ results, totalPages });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  } catch (err) {\r\n    console.error('Error executing fetch all posts:', err);\r\n    res.status(503).json({ error: 'Error executing query' });\r\n  }\r\n});\r\n\r\n\r\n\r\n//specific blog post fetch \r\napp.get(\"/categoryPage/:id\", (req, res) => {\r\n  const categoryId = req.params.id;\r\n  // console.log(\"category id is the\", categoryId);\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2; // Updated pageSizeNumber to 3\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE c.id = ${categoryId} AND p.checkbox = \"true\" AND p.sat = \"publish\"\r\n    LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n\r\n  const countPostsQuery = `SELECT COUNT(*) AS total FROM post WHERE category_id = ${categoryId} AND checkbox = \"true\" AND sat = \"publish\"`;\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts for the specific category\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n//fetch id using to category related subcategory data \r\napp.get(\"/categoryRelatedSubcategoryPost/:id\", (req, res) => {\r\n  const categoryId = req.params.id;\r\n  // console.log(\"category id is\", categoryId);\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, \r\n          shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id \r\n    WHERE c.parentid = ? AND p.checkbox = \"true\" LIMIT 3`;\r\n\r\n  db.query(query, [categoryId], (error, results) => {\r\n    if (error) {\r\n      console.error('Error fetching posts:', error);\r\n      res.status(500).json({ error: 'Error fetching posts' });\r\n    } else {\r\n      if (results.length === 0) {\r\n        // No results found for the provided categoryId\r\n        res.status(401).json({ error: 'Data not found' });\r\n      } else {\r\n        res.json(results);\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n\r\n\r\n\r\n\r\n//specific blog post fetch to subcategory\r\napp.get(\"/subcategoryPage/:id\", (req, res) => {\r\n  const Cateid = req.params.id;\r\n// console.log(\"category id is\", Cateid);\r\n\r\n\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date, p.category, p.desc, p.shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE c.id = ${Cateid} AND p.checkbox = \"true\" LIMIT 2`;\r\n\r\n    db.query(query, (error, results) => {\r\n      if (error) {\r\n        console.error('Error fetching posts:', error);\r\n        res.status(500).json({ error: 'Error fetching posts' });\r\n      } else {\r\n        if (results.length === 0) {\r\n          // No results found for the provided categoryId\r\n          res.status(401).json({ error: 'Data not found' });\r\n        } else {\r\n          res.json(results);\r\n        }\r\n      }\r\n    });\r\n});\r\n\r\n\r\n//search user anything\r\napp.get(\"/searchpage\", (req, res) => {\r\n  const searchTerm = req.query.q;\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n\r\n  // console.log(\"searchTerm is the name \", searchTerm);\r\n  const query = `\r\n    SELECT p.id, p.category_id, p.title, p.author, p.date,\r\n      p.category, p.desc, p.shortdesc, SUBSTRING(p.shortdesc, 1, 80) AS shortdesc, p.image, p.checkbox\r\n    FROM post p\r\n    INNER JOIN category c ON p.category_id = c.id\r\n    WHERE (p.title LIKE '%${searchTerm}%'\r\n        OR p.category LIKE '%${searchTerm}%'\r\n        OR p.desc LIKE '%${searchTerm}%'\r\n        OR p.shortdesc LIKE '%${searchTerm}%')\r\n        AND p.checkbox = 'true'\r\n    LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n\r\n  const countPostsQuery = `\r\n    SELECT COUNT(*) AS total\r\n    FROM post\r\n    WHERE (title LIKE '%${searchTerm}%'\r\n        OR category LIKE '%${searchTerm}%'\r\n        OR \\`desc\\` LIKE '%${searchTerm}%'\r\n        OR shortdesc LIKE '%${searchTerm}%')\r\n        AND checkbox = 'true'`;\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n// admin get category \r\napp.get(\"/admincate\", (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n\r\n  // console.log(\"number\",pageNumber)\r\n  const pageSizeNumber = parseInt(pageSize) || 2;\r\n  // console.log(\"pasizenumber\",pageSizeNumber)\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n  // console.log(offset)\r\n  try {\r\n  const query = `SELECT * FROM category LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n  const countPostsQuery = 'SELECT COUNT(*) AS total FROM category';\r\n\r\n  db.query(query, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n}\r\ncatch (err) {\r\n  console.error('Error executing fetch all posts:', err);\r\n  res.status(503).json({ error: 'Error executing query' });\r\n}\r\n})\r\n\r\n\r\n//pagination of the post\r\napp.get('/posts', (req, res) => {\r\n  const { page, pageSize } = req.query;\r\n  const pageNumber = parseInt(page) || 1;\r\n  const pageSizeNumber = parseInt(pageSize) || 2; // Update pageSizeNumber to 4\r\n  const offset = (pageNumber - 1) * pageSizeNumber;\r\n\r\n  // Fetch all posts from the database with pagination\r\n  const fetchAllPostsQuery = `SELECT * FROM post LIMIT ${pageSizeNumber} OFFSET ${offset}`;\r\n  const countPostsQuery = 'SELECT COUNT(*) AS total FROM post';\r\n\r\n  db.query(fetchAllPostsQuery, (error, results) => {\r\n    if (error) {\r\n      console.error('Error executing fetch all posts query:', error);\r\n      res.status(500).json({ error: 'Error executing query' });\r\n    } else {\r\n      // Fetch the total count of posts\r\n      db.query(countPostsQuery, (error, countResult) => {\r\n        if (error) {\r\n          console.error('Error executing count posts query:', error);\r\n          res.status(500).json({ error: 'Error executing query' });\r\n        } else {\r\n          const totalCount = countResult[0].total;\r\n          const totalPages = Math.ceil(totalCount / pageSizeNumber);\r\n\r\n          res.json({ results, totalPages });\r\n        }\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n\r\napp.listen(PORT, () => {\r\n  console.log(`Server is listening on port ${PORT}`);\r\n});\r\n\r\n\r\n\r\n\r\n"],"mappings":"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"}},"mtime":1693545910537}}